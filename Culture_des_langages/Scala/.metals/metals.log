2024.02.01 14:05:09 INFO  Started: Metals version 1.2.0 in folders 'C:\L3-upec\Culture_des_langages\Scala' for client Visual Studio Code 1.85.2.
févr. 01, 2024 2:05:11 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1
2024.02.01 14:05:11 WARN  Build server is not auto-connectable.
2024.02.01 14:05:11 WARN  no build tool detected in workspace 'C:\L3-upec\Culture_des_langages\Scala'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2024.02.01 14:05:11 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:05:16 INFO  no build target found for C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala. Using presentation compiler with project's scala-library version: 3.3.1
2024.02.01 14:05:19 INFO  time: code lens generation in 5.28s
févr. 01, 2024 2:06:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 17
2024.02.01 14:06:21 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:06:31 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:06:37 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:07:12 WARN  no build target for: C:\Users\Etudiant\Downloads\Cours.scala
2024.02.01 14:16:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:20:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:22:02 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:22:10 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:22:13 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:23:15 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:23:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:23:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:23:35 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:23:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:23:46 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:23:48 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:23:49 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:03 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
févr. 01, 2024 2:24:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 469
2024.02.01 14:24:04 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:06 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:07 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:08 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:18 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:22 ERROR Failed to tokenize input for semantic tokens for C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
scala.meta.tokenizers.TokenizeException: <input>:12: error: unclosed string literal
        case Variable(nom) => é"nom
                               ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)

2024.02.01 14:24:23 ERROR Failed to tokenize input for semantic tokens for C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
scala.meta.tokenizers.TokenizeException: <input>:12: error: unclosed string interpolation
        case Variable(nom) => s"nom
                                ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)

2024.02.01 14:24:24 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:24 ERROR Failed to tokenize input for semantic tokens for C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
scala.meta.tokenizers.TokenizeException: <input>:12: error: unclosed string interpolation
        case Variable(nom) => s"nom
                                ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)

2024.02.01 14:24:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
févr. 01, 2024 2:24:27 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 565
2024.02.01 14:24:28 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:31 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:33 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:42 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:24:44 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:25:28 ERROR Failed to tokenize input for semantic tokens for C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
scala.meta.tokenizers.TokenizeException: <input>:12: error: unclosed string interpolation
        case Variable(nom) => s"( $nom
                                      ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:249)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)

2024.02.01 14:25:29 ERROR Failed to tokenize input for semantic tokens for C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
scala.meta.tokenizers.TokenizeException: <input>:12: error: unclosed string interpolation
        case Variable(nom) => s"nom
                                ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)

2024.02.01 14:25:30 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:26:14 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
févr. 01, 2024 2:27:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 764
févr. 01, 2024 2:27:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 789
févr. 01, 2024 2:29:19 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 891
févr. 01, 2024 2:42:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 945
2024.02.01 14:42:34 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:43:24 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:43:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:43:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:43:40 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:43:45 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
févr. 01, 2024 2:44:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1046
2024.02.01 14:44:22 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:44:25 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:44:33 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:44:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:46:45 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:47:19 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:47:22 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:47:25 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:47:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:47:39 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 14:48:07 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 16:24:24 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.01 18:41:23 INFO  Shutting down server
2024.02.01 18:41:23 INFO  shutting down Metals
2024.02.01 18:41:23 INFO  Exiting server
2024.02.08 13:39:33 INFO  Started: Metals version 1.2.0 in folders 'C:\L3-upec\Culture_des_langages\Scala' for client Visual Studio Code 1.85.2.
2024.02.08 13:39:37 WARN  Build server is not auto-connectable.
2024.02.08 13:39:37 WARN  no build tool detected in workspace 'C:\L3-upec\Culture_des_langages\Scala'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2024.02.08 13:39:37 WARN  no build target for: C:\Users\Etudiant\Downloads\Cours.scala
2024.02.08 13:39:37 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\Tp3\tp3.scala
2024.02.08 13:39:45 INFO  no build target found for C:\Users\Etudiant\Downloads\Cours.scala. Using presentation compiler with project's scala-library version: 3.3.1
2024.02.08 13:39:55 INFO  time: code lens generation in 17s
2024.02.08 13:45:29 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:45:29 WARN  Could not find semantic tokens for: file:///C:/L3-upec/Culture_des_langages/Scala/TP4/tp4.scala
2024.02.08 13:45:30 WARN  Could not find semantic tokens for: file:///C:/L3-upec/Culture_des_langages/Scala/TP4/tp4.scala
2024.02.08 13:45:35 WARN  Could not find semantic tokens for: file:///C:/L3-upec/Culture_des_langages/Scala/TP4/tp4.scala
2024.02.08 13:45:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:45:35 WARN  Could not find semantic tokens for: file:///C:/L3-upec/Culture_des_langages/Scala/TP4/tp4.scala
févr. 08, 2024 1:45:38 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 26
2024.02.08 13:45:39 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:45:41 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 1:46:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 78
2024.02.08 13:46:28 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:46:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:46:57 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:47:02 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:47:09 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:47:11 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:47:13 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:47:48 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:47:56 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:48:16 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:48:28 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:48:30 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:48:33 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 1:48:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 267
2024.02.08 13:48:49 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:48:51 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:48:54 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:48:56 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:49:01 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:49:03 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:49:06 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:03 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:06 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:08 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:13 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:20 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:25 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:52 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:57 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:50:58 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:51:00 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:51:04 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:51:08 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:51:14 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:51:16 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:51:20 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:51:24 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 1:52:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 595
2024.02.08 13:52:21 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:23 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:24 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:28 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:31 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:39 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:41 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:45 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:52:49 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:53:25 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:53:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:53:30 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:53:31 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:55:40 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:55:52 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:56:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:56:53 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:11 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:12 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:16 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:17 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:30 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:31 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:34 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:57:39 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:58:05 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:58:43 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:59:19 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:59:21 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:59:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:59:29 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:59:34 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:59:35 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 13:59:54 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:01:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:01:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:02:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:02:30 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:02:34 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:04:04 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:04:14 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:04:15 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:04:17 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 2:04:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1200
2024.02.08 14:04:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 2:04:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1231
févr. 08, 2024 2:04:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1243
2024.02.08 14:04:55 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:08:49 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:08:54 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:09:15 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:09:19 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:09:51 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:09:56 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:14:46 WARN  no build target for: C:\Users\Etudiant\Downloads\Cours (1).scala
2024.02.08 14:15:08 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\Cours (1).scala
2024.02.08 14:16:50 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:16:53 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:16:57 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:19:23 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:19:25 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:19:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 2:31:54 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_14-31-54-711.md
févr. 08, 2024 2:35:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1602
2024.02.08 14:35:41 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:35:44 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:35:57 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:36:05 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 2:42:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1674
2024.02.08 14:43:18 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:44:31 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:44:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:44:34 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:44:35 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:44:37 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:44:40 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:44:46 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:45:24 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:45:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:45:38 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:45:39 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:45:47 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:45:50 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:46:00 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:47:00 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:47:18 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:47:44 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:48:09 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:48:28 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:48:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:48:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:48:38 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:48:41 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:48:48 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:48:52 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 2:49:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2086
2024.02.08 14:50:07 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:50:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:50:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:50:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:50:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:50:38 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:50:39 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:50:41 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:51:40 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:01 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:05 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:09 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:11 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:12 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:14 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:24 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:30 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:38 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:39 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:53:41 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:55:28 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:55:47 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:55:53 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 2:55:54 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2477
2024.02.08 14:55:56 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 14:56:21 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:02:13 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:02:16 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:02:19 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:02:21 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:02:25 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:02:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:02:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2586
2024.02.08 15:02:29 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:06:51 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:08:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2623
2024.02.08 15:08:06 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:08:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:08:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:08:41 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:08:53 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:08:56 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:17 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:20 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:22 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:25 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:29 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:35 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:44 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:46 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:52 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:09:55 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:10:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2911
2024.02.08 15:10:23 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:11:09 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:11:16 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:11:35 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:11:37 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:11:39 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:11:57 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:12:01 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:12:03 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:12:10 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:12:20 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:12:54 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:12:57 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:13:06 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:13:07 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:13:10 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:13:12 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:13:29 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:13:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3182
2024.02.08 15:13:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:14:14 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-21/lib/src.zip!/java.base/java/lang/Thread.java

Uri: jar:file:///C:/Program Files/Java/jdk-21/lib/src.zip!/java.base/java/lang/Thread.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:932)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	java.base/java.lang.reflect.Method.invoke(Method.java:580)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base/java.lang.Thread.run(Thread.java:1583)
```

févr. 08, 2024 3:14:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-21/lib/src.zip%21/java.base/java/lang/Thread.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2023, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.lang.ref.Reference;\nimport java.lang.reflect.Field;\nimport java.security.AccessController;\nimport java.security.AccessControlContext;\nimport java.security.Permission;\nimport java.security.PrivilegedAction;\nimport java.security.ProtectionDomain;\nimport java.time.Duration;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Objects;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.StructureViolationException;\nimport java.util.concurrent.locks.LockSupport;\nimport jdk.internal.event.ThreadSleepEvent;\nimport jdk.internal.misc.TerminatingThreadLocal;\nimport jdk.internal.misc.Unsafe;\nimport jdk.internal.misc.VM;\nimport jdk.internal.reflect.CallerSensitive;\nimport jdk.internal.reflect.Reflection;\nimport jdk.internal.vm.Continuation;\nimport jdk.internal.vm.ScopedValueContainer;\nimport jdk.internal.vm.StackableScope;\nimport jdk.internal.vm.ThreadContainer;\nimport jdk.internal.vm.annotation.ForceInline;\nimport jdk.internal.vm.annotation.Hidden;\nimport jdk.internal.vm.annotation.IntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\nimport sun.nio.ch.Interruptible;\nimport sun.security.util.SecurityConstants;\nimport static java.util.concurrent.TimeUnit.MILLISECONDS;\nimport static java.util.concurrent.TimeUnit.NANOSECONDS;\n\n/**\n * A \u003ci\u003ethread\u003c/i\u003e is a thread of execution in a program. The Java\n * virtual machine allows an application to have multiple threads of\n * execution running concurrently.\n *\n * \u003cp\u003e {@code Thread} defines constructors and a {@link Builder} to create threads.\n * {@linkplain #start() Starting} a thread schedules it to execute its {@link #run() run}\n * method. The newly started thread executes concurrently with the thread that caused\n * it to start.\n *\n * \u003cp\u003e A thread \u003ci\u003eterminates\u003c/i\u003e if either its {@code run} method completes normally,\n * or if its {@code run} method completes abruptly and the appropriate {@linkplain\n * Thread.UncaughtExceptionHandler uncaught exception handler} completes normally or\n * abruptly. With no code left to run, the thread has completed execution. The\n * {@link #join() join} method can be used to wait for a thread to terminate.\n *\n * \u003cp\u003e Threads have a unique {@linkplain #threadId() identifier} and a {@linkplain\n * #getName() name}. The identifier is generated when a {@code Thread} is created\n * and cannot be changed. The thread name can be specified when creating a thread\n * or can be {@linkplain #setName(String) changed} at a later time.\n *\n * \u003cp\u003e Threads support {@link ThreadLocal} variables. These are variables that are\n * local to a thread, meaning a thread can have a copy of a variable that is set to\n * a value that is independent of the value set by other threads. {@code Thread} also\n * supports {@link InheritableThreadLocal} variables that are thread local variables\n * that are inherited at thread creation time from the parent {@code Thread}.\n * {@code Thread} supports a special inheritable thread local for the thread\n * {@linkplain #getContextClassLoader() context-class-loader}.\n *\n * \u003ch2\u003e\u003ca id\u003d\"platform-threads\"\u003ePlatform threads\u003c/a\u003e\u003c/h2\u003e\n * \u003cp\u003e {@code Thread} supports the creation of \u003ci\u003eplatform threads\u003c/i\u003e that are\n * typically mapped 1:1 to kernel threads scheduled by the operating system.\n * Platform threads will usually have a large stack and other resources that are\n * maintained by the operating system. Platforms threads are suitable for executing\n * all types of tasks but may be a limited resource.\n *\n * \u003cp\u003e Platform threads get an automatically generated thread name by default.\n *\n * \u003cp\u003e Platform threads are designated \u003ci\u003edaemon\u003c/i\u003e or \u003ci\u003enon-daemon\u003c/i\u003e threads.\n * When the Java virtual machine starts up, there is usually one non-daemon\n * thread (the thread that typically calls the application\u0027s {@code main} method).\n * The \u003ca href\u003d\"Runtime.html#shutdown\"\u003eshutdown sequence\u003c/a\u003e begins when all started\n * non-daemon threads have terminated. Unstarted non-daemon threads do not prevent\n * the shutdown sequence from beginning.\n *\n * \u003cp\u003e In addition to the daemon status, platform threads have a {@linkplain\n * #getPriority() thread priority} and are members of a {@linkplain ThreadGroup\n * thread group}.\n *\n * \u003ch2\u003e\u003ca id\u003d\"virtual-threads\"\u003eVirtual threads\u003c/a\u003e\u003c/h2\u003e\n * \u003cp\u003e {@code Thread} also supports the creation of \u003ci\u003evirtual threads\u003c/i\u003e.\n * Virtual threads are typically \u003ci\u003euser-mode threads\u003c/i\u003e scheduled by the Java\n * runtime rather than the operating system. Virtual threads will typically require\n * few resources and a single Java virtual machine may support millions of virtual\n * threads. Virtual threads are suitable for executing tasks that spend most of\n * the time blocked, often waiting for I/O operations to complete. Virtual threads\n * are not intended for long running CPU intensive operations.\n *\n * \u003cp\u003e Virtual threads typically employ a small set of platform threads used as\n * \u003cem\u003ecarrier threads\u003c/em\u003e. Locking and I/O operations are examples of operations\n * where a carrier thread may be re-scheduled from one virtual thread to another.\n * Code executing in a virtual thread is not aware of the underlying carrier thread.\n * The {@linkplain Thread#currentThread()} method, used to obtain a reference\n * to the \u003ci\u003ecurrent thread\u003c/i\u003e, will always return the {@code Thread} object\n * for the virtual thread.\n *\n * \u003cp\u003e Virtual threads do not have a thread name by default. The {@link #getName()\n * getName} method returns the empty string if a thread name is not set.\n *\n * \u003cp\u003e Virtual threads are daemon threads and so do not prevent the\n * \u003ca href\u003d\"Runtime.html#shutdown\"\u003eshutdown sequence\u003c/a\u003e from beginning.\n * Virtual threads have a fixed {@linkplain #getPriority() thread priority}\n * that cannot be changed.\n *\n * \u003ch2\u003eCreating and starting threads\u003c/h2\u003e\n *\n * \u003cp\u003e {@code Thread} defines public constructors for creating platform threads and\n * the {@link #start() start} method to schedule threads to execute. {@code Thread}\n * may be extended for customization and other advanced reasons although most\n * applications should have little need to do this.\n *\n * \u003cp\u003e {@code Thread} defines a {@link Builder} API for creating and starting both\n * platform and virtual threads. The following are examples that use the builder:\n * {@snippet :\n *   Runnable runnable \u003d ...\n *\n *   // Start a daemon thread to run a task\n *   Thread thread \u003d Thread.ofPlatform().daemon().start(runnable);\n *\n *   // Create an unstarted thread with name \"duke\", its start() method\n *   // must be invoked to schedule it to execute.\n *   Thread thread \u003d Thread.ofPlatform().name(\"duke\").unstarted(runnable);\n *\n *   // A ThreadFactory that creates daemon threads named \"worker-0\", \"worker-1\", ...\n *   ThreadFactory factory \u003d Thread.ofPlatform().daemon().name(\"worker-\", 0).factory();\n *\n *   // Start a virtual thread to run a task\n *   Thread thread \u003d Thread.ofVirtual().start(runnable);\n *\n *   // A ThreadFactory that creates virtual threads\n *   ThreadFactory factory \u003d Thread.ofVirtual().factory();\n * }\n *\n * \u003ch2\u003e\u003ca id\u003d\"inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\u003c/h2\u003e\n * A {@code Thread} inherits its initial values of {@linkplain InheritableThreadLocal\n * inheritable-thread-local} variables (including the context class loader) from\n * the parent thread values at the time that the child {@code Thread} is created.\n * The 5-param {@linkplain Thread#Thread(ThreadGroup, Runnable, String, long, boolean)\n * constructor} can be used to create a thread that does not inherit its initial\n * values from the constructing thread. When using a {@code Thread.Builder}, the\n * {@link Builder#inheritInheritableThreadLocals(boolean) inheritInheritableThreadLocals}\n * method can be used to select if the initial values are inherited.\n *\n * \u003cp\u003e Platform threads inherit the daemon status, thread priority, and when not\n * provided (or not selected by a security manager), the thread group.\n *\n * \u003cp\u003e Creating a platform thread {@linkplain AccessController#getContext() captures} the\n * {@linkplain AccessControlContext caller context} to limit the {@linkplain Permission\n * permissions} of the new thread when it executes code that performs a {@linkplain\n * AccessController#doPrivileged(PrivilegedAction) privileged action}. The captured\n * caller context is the new thread\u0027s \"Inherited {@link AccessControlContext}\". Creating\n * a virtual thread does not capture the caller context; virtual threads have no\n * permissions when executing code that performs a privileged action.\n *\n * \u003cp\u003e Unless otherwise specified, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be thrown.\n *\n * @implNote\n * In the JDK Reference Implementation, the virtual thread scheduler may be configured\n * with the following system properties:\n * \u003ctable class\u003d\"striped\"\u003e\n * \u003ccaption style\u003d\"display:none:\"\u003eSystem properties\u003c/caption\u003e\n *   \u003cthead\u003e\n *   \u003ctr\u003e\n *     \u003cth scope\u003d\"col\"\u003eSystem property\u003c/th\u003e\n *     \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n *   \u003c/tr\u003e\n *   \u003c/thead\u003e\n *   \u003ctbody\u003e\n *   \u003ctr\u003e\n *     \u003cth scope\u003d\"row\"\u003e\n *       {@systemProperty jdk.virtualThreadScheduler.parallelism}\n *     \u003c/th\u003e\n *     \u003ctd\u003e The number of platform threads available for scheduling virtual\n *       threads. It defaults to the number of available processors. \u003c/td\u003e\n *   \u003c/tr\u003e\n *   \u003ctr\u003e\n *     \u003cth scope\u003d\"row\"\u003e\n *       {@systemProperty jdk.virtualThreadScheduler.maxPoolSize}\n *     \u003c/th\u003e\n *     \u003ctd\u003e The maximum number of platform threads available to the scheduler.\n *       It defaults to 256. \u003c/td\u003e\n *   \u003c/tr\u003e\n *   \u003c/tbody\u003e\n * \u003c/table\u003e\n *\n * @since   1.0\n */\npublic class Thread implements Runnable {\n    /* Make sure registerNatives is the first thing \u003cclinit\u003e does. */\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    /*\n     * Reserved for exclusive use by the JVM. Cannot be moved to the FieldHolder\n     * as it needs to be set by the VM for JNI attaching threads, before executing\n     * the constructor that will create the FieldHolder. The historically named\n     * `eetop` holds the address of the underlying VM JavaThread, and is set to\n     * non-zero when the thread is started, and reset to zero when the thread terminates.\n     * A non-zero value indicates this thread isAlive().\n     */\n    private volatile long eetop;\n\n    // thread id\n    private final long tid;\n\n    // thread name\n    private volatile String name;\n\n    // interrupt status (read/written by VM)\n    volatile boolean interrupted;\n\n    // context ClassLoader\n    private volatile ClassLoader contextClassLoader;\n\n    // inherited AccessControlContext, this could be moved to FieldHolder\n    @SuppressWarnings(\"removal\")\n    private AccessControlContext inheritedAccessControlContext;\n\n    // Additional fields for platform threads.\n    // All fields, except task, are accessed directly by the VM.\n    private static class FieldHolder {\n        final ThreadGroup group;\n        final Runnable task;\n        final long stackSize;\n        volatile int priority;\n        volatile boolean daemon;\n        volatile int threadStatus;\n\n        FieldHolder(ThreadGroup group,\n                    Runnable task,\n                    long stackSize,\n                    int priority,\n                    boolean daemon) {\n            this.group \u003d group;\n            this.task \u003d task;\n            this.stackSize \u003d stackSize;\n            this.priority \u003d priority;\n            if (daemon)\n                this.daemon \u003d true;\n        }\n    }\n    private final FieldHolder holder;\n\n    /*\n     * ThreadLocal values pertaining to this thread. This map is maintained\n     * by the ThreadLocal class.\n     */\n    ThreadLocal.ThreadLocalMap threadLocals;\n\n    /*\n     * InheritableThreadLocal values pertaining to this thread. This map is\n     * maintained by the InheritableThreadLocal class.\n     */\n    ThreadLocal.ThreadLocalMap inheritableThreadLocals;\n\n    /*\n     * Scoped value bindings are maintained by the ScopedValue class.\n     */\n    private Object scopedValueBindings;\n\n    // Special value to indicate this is a newly-created Thread\n    // Note that his must match the declaration in ScopedValue.\n    private static final Object NEW_THREAD_BINDINGS \u003d Thread.class;\n\n    static Object scopedValueBindings() {\n        return currentThread().scopedValueBindings;\n    }\n\n    static void setScopedValueBindings(Object bindings) {\n        currentThread().scopedValueBindings \u003d bindings;\n    }\n\n    /**\n     * Search the stack for the most recent scoped-value bindings.\n     */\n    @IntrinsicCandidate\n    static native Object findScopedValueBindings();\n\n    /**\n     * Inherit the scoped-value bindings from the given container.\n     * Invoked when starting a thread.\n     */\n    void inheritScopedValueBindings(ThreadContainer container) {\n        ScopedValueContainer.BindingsSnapshot snapshot;\n        if (container.owner() !\u003d null\n                \u0026\u0026 (snapshot \u003d container.scopedValueBindings()) !\u003d null) {\n\n            // bindings established for running/calling an operation\n            Object bindings \u003d snapshot.scopedValueBindings();\n            if (currentThread().scopedValueBindings !\u003d bindings) {\n                throw new StructureViolationException(\"Scoped value bindings have changed\");\n            }\n\n            this.scopedValueBindings \u003d bindings;\n        }\n    }\n\n    /*\n     * Lock object for thread interrupt.\n     */\n    final Object interruptLock \u003d new Object();\n\n    /**\n     * The argument supplied to the current call to\n     * java.util.concurrent.locks.LockSupport.park.\n     * Set by (private) java.util.concurrent.locks.LockSupport.setBlocker\n     * Accessed using java.util.concurrent.locks.LockSupport.getBlocker\n     */\n    private volatile Object parkBlocker;\n\n    /* The object in which this thread is blocked in an interruptible I/O\n     * operation, if any.  The blocker\u0027s interrupt method should be invoked\n     * after setting this thread\u0027s interrupt status.\n     */\n    volatile Interruptible nioBlocker;\n\n    /* Set the blocker field; invoked via jdk.internal.access.SharedSecrets\n     * from java.nio code\n     */\n    static void blockedOn(Interruptible b) {\n        Thread me \u003d Thread.currentThread();\n        synchronized (me.interruptLock) {\n            me.nioBlocker \u003d b;\n        }\n    }\n\n    /**\n     * The minimum priority that a thread can have.\n     */\n    public static final int MIN_PRIORITY \u003d 1;\n\n    /**\n     * The default priority that is assigned to a thread.\n     */\n    public static final int NORM_PRIORITY \u003d 5;\n\n    /**\n     * The maximum priority that a thread can have.\n     */\n    public static final int MAX_PRIORITY \u003d 10;\n\n    /*\n     * Current inner-most continuation.\n     */\n    private Continuation cont;\n\n    /**\n     * Returns the current continuation.\n     */\n    Continuation getContinuation() {\n        return cont;\n    }\n\n    /**\n     * Sets the current continuation.\n     */\n    void setContinuation(Continuation cont) {\n        this.cont \u003d cont;\n    }\n\n    /**\n     * Returns the Thread object for the current platform thread. If the\n     * current thread is a virtual thread then this method returns the carrier.\n     */\n    @IntrinsicCandidate\n    static native Thread currentCarrierThread();\n\n    /**\n     * Returns the Thread object for the current thread.\n     * @return  the current thread\n     */\n    @IntrinsicCandidate\n    public static native Thread currentThread();\n\n    /**\n     * Sets the Thread object to be returned by Thread.currentThread().\n     */\n    @IntrinsicCandidate\n    native void setCurrentThread(Thread thread);\n\n    // ScopedValue support:\n\n    @IntrinsicCandidate\n    static native Object[] scopedValueCache();\n\n    @IntrinsicCandidate\n    static native void setScopedValueCache(Object[] cache);\n\n    @IntrinsicCandidate\n    static native void ensureMaterializedForStackWalk(Object o);\n\n    /**\n     * A hint to the scheduler that the current thread is willing to yield\n     * its current use of a processor. The scheduler is free to ignore this\n     * hint.\n     *\n     * \u003cp\u003e Yield is a heuristic attempt to improve relative progression\n     * between threads that would otherwise over-utilise a CPU. Its use\n     * should be combined with detailed profiling and benchmarking to\n     * ensure that it actually has the desired effect.\n     *\n     * \u003cp\u003e It is rarely appropriate to use this method. It may be useful\n     * for debugging or testing purposes, where it may help to reproduce\n     * bugs due to race conditions. It may also be useful when designing\n     * concurrency control constructs such as the ones in the\n     * {@link java.util.concurrent.locks} package.\n     */\n    public static void yield() {\n        if (currentThread() instanceof VirtualThread vthread) {\n            vthread.tryYield();\n        } else {\n            yield0();\n        }\n    }\n\n    private static native void yield0();\n\n    /**\n     * Called before sleeping to create a jdk.ThreadSleep event.\n     */\n    private static ThreadSleepEvent beforeSleep(long nanos) {\n        ThreadSleepEvent event \u003d null;\n        if (ThreadSleepEvent.isTurnedOn()) {\n            try {\n                event \u003d new ThreadSleepEvent();\n                event.time \u003d nanos;\n                event.begin();\n            } catch (OutOfMemoryError e) {\n                event \u003d null;\n            }\n        }\n        return event;\n    }\n\n    /**\n     * Called after sleeping to commit the jdk.ThreadSleep event.\n     */\n    private static void afterSleep(ThreadSleepEvent event) {\n        if (event !\u003d null) {\n            try {\n                event.commit();\n            } catch (OutOfMemoryError e) {\n                // ignore\n            }\n        }\n    }\n\n    /**\n     * Causes the currently executing thread to sleep (temporarily cease\n     * execution) for the specified number of milliseconds, subject to\n     * the precision and accuracy of system timers and schedulers. The thread\n     * does not lose ownership of any monitors.\n     *\n     * @param  millis\n     *         the length of time to sleep in milliseconds\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public static void sleep(long millis) throws InterruptedException {\n        if (millis \u003c 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        long nanos \u003d MILLISECONDS.toNanos(millis);\n        ThreadSleepEvent event \u003d beforeSleep(nanos);\n        try {\n            if (currentThread() instanceof VirtualThread vthread) {\n                vthread.sleepNanos(nanos);\n            } else {\n                sleep0(nanos);\n            }\n        } finally {\n            afterSleep(event);\n        }\n    }\n\n    private static native void sleep0(long nanos) throws InterruptedException;\n\n    /**\n     * Causes the currently executing thread to sleep (temporarily cease\n     * execution) for the specified number of milliseconds plus the specified\n     * number of nanoseconds, subject to the precision and accuracy of system\n     * timers and schedulers. The thread does not lose ownership of any\n     * monitors.\n     *\n     * @param  millis\n     *         the length of time to sleep in milliseconds\n     *\n     * @param  nanos\n     *         {@code 0-999999} additional nanoseconds to sleep\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative, or the value of\n     *          {@code nanos} is not in the range {@code 0-999999}\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public static void sleep(long millis, int nanos) throws InterruptedException {\n        if (millis \u003c 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos \u003c 0 || nanos \u003e 999999) {\n            throw new IllegalArgumentException(\"nanosecond timeout value out of range\");\n        }\n\n        // total sleep time, in nanoseconds\n        long totalNanos \u003d MILLISECONDS.toNanos(millis);\n        totalNanos +\u003d Math.min(Long.MAX_VALUE - totalNanos, nanos);\n\n        ThreadSleepEvent event \u003d beforeSleep(totalNanos);\n        try {\n            if (currentThread() instanceof VirtualThread vthread) {\n                vthread.sleepNanos(totalNanos);\n            } else {\n                sleep0(totalNanos);\n            }\n        } finally {\n            afterSleep(event);\n        }\n    }\n\n    /**\n     * Causes the currently executing thread to sleep (temporarily cease\n     * execution) for the specified duration, subject to the precision and\n     * accuracy of system timers and schedulers. This method is a no-op if\n     * the duration is {@linkplain Duration#isNegative() negative}.\n     *\n     * @param  duration\n     *         the duration to sleep\n     *\n     * @throws  InterruptedException\n     *          if the current thread is interrupted while sleeping. The\n     *          \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is\n     *          cleared when this exception is thrown.\n     *\n     * @since 19\n     */\n    public static void sleep(Duration duration) throws InterruptedException {\n        long nanos \u003d NANOSECONDS.convert(duration);  // MAX_VALUE if \u003e 292 years\n        if (nanos \u003c 0) {\n            return;\n        }\n\n        ThreadSleepEvent event \u003d beforeSleep(nanos);\n        try {\n            if (currentThread() instanceof VirtualThread vthread) {\n                vthread.sleepNanos(nanos);\n            } else {\n                sleep0(nanos);\n            }\n        } finally {\n            afterSleep(event);\n        }\n    }\n\n    /**\n     * Indicates that the caller is momentarily unable to progress, until the\n     * occurrence of one or more actions on the part of other activities. By\n     * invoking this method within each iteration of a spin-wait loop construct,\n     * the calling thread indicates to the runtime that it is busy-waiting.\n     * The runtime may take action to improve the performance of invoking\n     * spin-wait loop constructions.\n     *\n     * @apiNote\n     * As an example consider a method in a class that spins in a loop until\n     * some flag is set outside of that method. A call to the {@code onSpinWait}\n     * method should be placed inside the spin loop.\n     * {@snippet :\n     *     class EventHandler {\n     *         volatile boolean eventNotificationNotReceived;\n     *         void waitForEventAndHandleIt() {\n     *             while ( eventNotificationNotReceived ) {\n     *                 Thread.onSpinWait();\n     *             }\n     *             readAndProcessEvent();\n     *         }\n     *\n     *         void readAndProcessEvent() {\n     *             // Read event from some source and process it\n     *              . . .\n     *         }\n     *     }\n     * }\n     * \u003cp\u003e\n     * The code above would remain correct even if the {@code onSpinWait}\n     * method was not called at all. However on some architectures the Java\n     * Virtual Machine may issue the processor instructions to address such\n     * code patterns in a more beneficial way.\n     *\n     * @since 9\n     */\n    @IntrinsicCandidate\n    public static void onSpinWait() {}\n\n    /**\n     * Characteristic value signifying that initial values for {@link\n     * InheritableThreadLocal inheritable-thread-locals} are not inherited from\n     * the constructing thread.\n     * See Thread initialization.\n     */\n    static final int NO_INHERIT_THREAD_LOCALS \u003d 1 \u003c\u003c 2;\n\n    /**\n     * Helper class to generate thread identifiers. The identifiers start at\n     * 2 as this class cannot be used during early startup to generate the\n     * identifier for the primordial thread. The counter is off-heap and\n     * shared with the VM to allow it assign thread identifiers to non-Java\n     * threads.\n     * See Thread initialization.\n     */\n    private static class ThreadIdentifiers {\n        private static final Unsafe U;\n        private static final long NEXT_TID_OFFSET;\n        static {\n            U \u003d Unsafe.getUnsafe();\n            NEXT_TID_OFFSET \u003d Thread.getNextThreadIdOffset();\n        }\n        static long next() {\n            return U.getAndAddLong(null, NEXT_TID_OFFSET, 1);\n        }\n    }\n\n    /**\n     * Returns the context class loader to inherit from the parent thread.\n     * See Thread initialization.\n     */\n    private static ClassLoader contextClassLoader(Thread parent) {\n        @SuppressWarnings(\"removal\")\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm \u003d\u003d null || isCCLOverridden(parent.getClass())) {\n            return parent.getContextClassLoader();\n        } else {\n            // skip call to getContextClassLoader\n            return parent.contextClassLoader;\n        }\n    }\n\n    /**\n     * Initializes a platform Thread.\n     *\n     * @param g the Thread group, can be null\n     * @param name the name of the new Thread\n     * @param characteristics thread characteristics\n     * @param task the object whose run() method gets called\n     * @param stackSize the desired stack size for the new thread, or\n     *        zero to indicate that this parameter is to be ignored.\n     * @param acc the AccessControlContext to inherit, or\n     *        AccessController.getContext() if null\n     */\n    @SuppressWarnings(\"removal\")\n    Thread(ThreadGroup g, String name, int characteristics, Runnable task,\n           long stackSize, AccessControlContext acc) {\n\n        Thread parent \u003d currentThread();\n        boolean attached \u003d (parent \u003d\u003d this);   // primordial or JNI attached\n\n        if (attached) {\n            if (g \u003d\u003d null) {\n                throw new InternalError(\"group cannot be null when attaching\");\n            }\n            this.holder \u003d new FieldHolder(g, task, stackSize, NORM_PRIORITY, false);\n        } else {\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (g \u003d\u003d null) {\n                // the security manager can choose the thread group\n                if (sm !\u003d null) {\n                    g \u003d sm.getThreadGroup();\n                }\n\n                // default to current thread\u0027s group\n                if (g \u003d\u003d null) {\n                    g \u003d parent.getThreadGroup();\n                }\n            }\n\n            // permission checks when creating a child Thread\n            if (sm !\u003d null) {\n                sm.checkAccess(g);\n                if (isCCLOverridden(getClass())) {\n                    sm.checkPermission(SecurityConstants.SUBCLASS_IMPLEMENTATION_PERMISSION);\n                }\n            }\n\n            int priority \u003d Math.min(parent.getPriority(), g.getMaxPriority());\n            this.holder \u003d new FieldHolder(g, task, stackSize, priority, parent.isDaemon());\n        }\n\n        if (attached \u0026\u0026 VM.initLevel() \u003c 1) {\n            this.tid \u003d 1;  // primordial thread\n        } else {\n            this.tid \u003d ThreadIdentifiers.next();\n        }\n        this.name \u003d (name !\u003d null) ? name : genThreadName();\n\n        if (acc !\u003d null) {\n            this.inheritedAccessControlContext \u003d acc;\n        } else {\n            this.inheritedAccessControlContext \u003d AccessController.getContext();\n        }\n\n        // thread locals\n        if (!attached) {\n            if ((characteristics \u0026 NO_INHERIT_THREAD_LOCALS) \u003d\u003d 0) {\n                ThreadLocal.ThreadLocalMap parentMap \u003d parent.inheritableThreadLocals;\n                if (parentMap !\u003d null \u0026\u0026 parentMap.size() \u003e 0) {\n                    this.inheritableThreadLocals \u003d ThreadLocal.createInheritedMap(parentMap);\n                }\n                if (VM.isBooted()) {\n                    this.contextClassLoader \u003d contextClassLoader(parent);\n                }\n            } else if (VM.isBooted()) {\n                // default CCL to the system class loader when not inheriting\n                this.contextClassLoader \u003d ClassLoader.getSystemClassLoader();\n            }\n        }\n\n        // special value to indicate this is a newly-created Thread\n        // Note that his must match the declaration in ScopedValue.\n        this.scopedValueBindings \u003d NEW_THREAD_BINDINGS;\n    }\n\n    /**\n     * Initializes a virtual Thread.\n     *\n     * @param name thread name, can be null\n     * @param characteristics thread characteristics\n     * @param bound true when bound to an OS thread\n     */\n    Thread(String name, int characteristics, boolean bound) {\n        this.tid \u003d ThreadIdentifiers.next();\n        this.name \u003d (name !\u003d null) ? name : \"\";\n        this.inheritedAccessControlContext \u003d Constants.NO_PERMISSIONS_ACC;\n\n        // thread locals\n        if ((characteristics \u0026 NO_INHERIT_THREAD_LOCALS) \u003d\u003d 0) {\n            Thread parent \u003d currentThread();\n            ThreadLocal.ThreadLocalMap parentMap \u003d parent.inheritableThreadLocals;\n            if (parentMap !\u003d null \u0026\u0026 parentMap.size() \u003e 0) {\n                this.inheritableThreadLocals \u003d ThreadLocal.createInheritedMap(parentMap);\n            }\n            this.contextClassLoader \u003d contextClassLoader(parent);\n        } else {\n            // default CCL to the system class loader when not inheriting\n            this.contextClassLoader \u003d ClassLoader.getSystemClassLoader();\n        }\n\n        // special value to indicate this is a newly-created Thread\n        this.scopedValueBindings \u003d NEW_THREAD_BINDINGS;\n\n        // create a FieldHolder object, needed when bound to an OS thread\n        if (bound) {\n            ThreadGroup g \u003d Constants.VTHREAD_GROUP;\n            int pri \u003d NORM_PRIORITY;\n            this.holder \u003d new FieldHolder(g, null, -1, pri, true);\n        } else {\n            this.holder \u003d null;\n        }\n    }\n\n    /**\n     * Returns a builder for creating a platform {@code Thread} or {@code ThreadFactory}\n     * that creates platform threads.\n     *\n     * \u003cp\u003e \u003ca id\u003d\"ofplatform-security\"\u003e\u003cb\u003eInteraction with security manager when\n     * creating platform threads\u003c/b\u003e\u003c/a\u003e\n     * \u003cp\u003e Creating a platform thread when there is a security manager set will\n     * invoke the security manager\u0027s {@link SecurityManager#checkAccess(ThreadGroup)\n     * checkAccess(ThreadGroup)} method with the thread\u0027s thread group.\n     * If the thread group has not been set with the {@link\n     * Builder.OfPlatform#group(ThreadGroup) OfPlatform.group} method then the\n     * security manager\u0027s {@link SecurityManager#getThreadGroup() getThreadGroup}\n     * method will be invoked first to select the thread group. If the security\n     * manager {@code getThreadGroup} method returns {@code null} then the thread\n     * group of the constructing thread is used.\n     *\n     * @apiNote The following are examples using the builder:\n     * {@snippet :\n     *   // Start a daemon thread to run a task\n     *   Thread thread \u003d Thread.ofPlatform().daemon().start(runnable);\n     *\n     *   // Create an unstarted thread with name \"duke\", its start() method\n     *   // must be invoked to schedule it to execute.\n     *   Thread thread \u003d Thread.ofPlatform().name(\"duke\").unstarted(runnable);\n     *\n     *   // A ThreadFactory that creates daemon threads named \"worker-0\", \"worker-1\", ...\n     *   ThreadFactory factory \u003d Thread.ofPlatform().daemon().name(\"worker-\", 0).factory();\n     * }\n     *\n     * @return A builder for creating {@code Thread} or {@code ThreadFactory} objects.\n     * @since 21\n     */\n    public static Builder.OfPlatform ofPlatform() {\n        return new ThreadBuilders.PlatformThreadBuilder();\n    }\n\n    /**\n     * Returns a builder for creating a virtual {@code Thread} or {@code ThreadFactory}\n     * that creates virtual threads.\n     *\n     * @apiNote The following are examples using the builder:\n     * {@snippet :\n     *   // Start a virtual thread to run a task.\n     *   Thread thread \u003d Thread.ofVirtual().start(runnable);\n     *\n     *   // A ThreadFactory that creates virtual threads\n     *   ThreadFactory factory \u003d Thread.ofVirtual().factory();\n     * }\n     *\n     * @return A builder for creating {@code Thread} or {@code ThreadFactory} objects.\n     * @since 21\n     */\n    public static Builder.OfVirtual ofVirtual() {\n        return new ThreadBuilders.VirtualThreadBuilder();\n    }\n\n    /**\n     * A builder for {@link Thread} and {@link ThreadFactory} objects.\n     *\n     * \u003cp\u003e {@code Builder} defines methods to set {@code Thread} properties such\n     * as the thread {@link #name(String) name}. This includes properties that would\n     * otherwise be \u003ca href\u003d\"Thread.html#inheritance\"\u003einherited\u003c/a\u003e. Once set, a\n     * {@code Thread} or {@code ThreadFactory} is created with the following methods:\n     *\n     * \u003cul\u003e\n     *     \u003cli\u003e The {@linkplain #unstarted(Runnable) unstarted} method creates a new\n     *          \u003cem\u003eunstarted\u003c/em\u003e {@code Thread} to run a task. The {@code Thread}\u0027s\n     *          {@link Thread#start() start} method must be invoked to schedule the\n     *          thread to execute.\n     *     \u003cli\u003e The {@linkplain #start(Runnable) start} method creates a new {@code\n     *          Thread} to run a task and schedules the thread to execute.\n     *     \u003cli\u003e The {@linkplain #factory() factory} method creates a {@code ThreadFactory}.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e A {@code Thread.Builder} is not thread safe. The {@code ThreadFactory}\n     * returned by the builder\u0027s {@code factory()} method is thread safe.\n     *\n     * \u003cp\u003e Unless otherwise specified, passing a null argument to a method in\n     * this interface causes a {@code NullPointerException} to be thrown.\n     *\n     * @see Thread#ofPlatform()\n     * @see Thread#ofVirtual()\n     * @since 21\n     */\n    public sealed interface Builder\n            permits Builder.OfPlatform, Builder.OfVirtual {\n\n        /**\n         * Sets the thread name.\n         * @param name thread name\n         * @return this builder\n         */\n        Builder name(String name);\n\n        /**\n         * Sets the thread name to be the concatenation of a string prefix and\n         * the string representation of a counter value. The counter\u0027s initial\n         * value is {@code start}. It is incremented after a {@code Thread} is\n         * created with this builder so that the next thread is named with\n         * the new counter value. A {@code ThreadFactory} created with this\n         * builder is seeded with the current value of the counter. The {@code\n         * ThreadFactory} increments its copy of the counter after {@link\n         * ThreadFactory#newThread(Runnable) newThread} is used to create a\n         * {@code Thread}.\n         *\n         * @apiNote\n         * The following example creates a builder that is invoked twice to start\n         * two threads named \"{@code worker-0}\" and \"{@code worker-1}\".\n         * {@snippet :\n         *   Thread.Builder builder \u003d Thread.ofPlatform().name(\"worker-\", 0);\n         *   Thread t1 \u003d builder.start(task1);   // name \"worker-0\"\n         *   Thread t2 \u003d builder.start(task2);   // name \"worker-1\"\n         * }\n         *\n         * @param prefix thread name prefix\n         * @param start the starting value of the counter\n         * @return this builder\n         * @throws IllegalArgumentException if start is negative\n         */\n        Builder name(String prefix, long start);\n\n        /**\n         * Sets whether the thread inherits the initial values of {@linkplain\n         * InheritableThreadLocal inheritable-thread-local} variables from the\n         * constructing thread. The default is to inherit.\n         *\n         * @param inherit {@code true} to inherit, {@code false} to not inherit\n         * @return this builder\n         */\n        Builder inheritInheritableThreadLocals(boolean inherit);\n\n        /**\n         * Sets the uncaught exception handler.\n         * @param ueh uncaught exception handler\n         * @return this builder\n         */\n        Builder uncaughtExceptionHandler(UncaughtExceptionHandler ueh);\n\n        /**\n         * Creates a new {@code Thread} from the current state of the builder to\n         * run the given task. The {@code Thread}\u0027s {@link Thread#start() start}\n         * method must be invoked to schedule the thread to execute.\n         *\n         * @param task the object to run when the thread executes\n         * @return a new unstarted Thread\n         * @throws SecurityException if denied by the security manager\n         *         (See \u003ca href\u003d\"Thread.html#ofplatform-security\"\u003eInteraction with\n         *         security manager when creating platform threads\u003c/a\u003e)\n         *\n         * @see \u003ca href\u003d\"Thread.html#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n         */\n        Thread unstarted(Runnable task);\n\n        /**\n         * Creates a new {@code Thread} from the current state of the builder and\n         * schedules it to execute.\n         *\n         * @param task the object to run when the thread executes\n         * @return a new started Thread\n         * @throws SecurityException if denied by the security manager\n         *         (See \u003ca href\u003d\"Thread.html#ofplatform-security\"\u003eInteraction with\n         *         security manager when creating platform threads\u003c/a\u003e)\n         *\n         * @see \u003ca href\u003d\"Thread.html#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n         */\n        Thread start(Runnable task);\n\n        /**\n         * Returns a {@code ThreadFactory} to create threads from the current\n         * state of the builder. The returned thread factory is safe for use by\n         * multiple concurrent threads.\n         *\n         * @return a thread factory to create threads\n         */\n        ThreadFactory factory();\n\n        /**\n         * A builder for creating a platform {@link Thread} or {@link ThreadFactory}\n         * that creates platform threads.\n         *\n         * \u003cp\u003e Unless otherwise specified, passing a null argument to a method in\n         * this interface causes a {@code NullPointerException} to be thrown.\n         *\n         * @see Thread#ofPlatform()\n         * @since 21\n         */\n        sealed interface OfPlatform extends Builder\n                permits ThreadBuilders.PlatformThreadBuilder {\n\n            @Override OfPlatform name(String name);\n\n            /**\n             * @throws IllegalArgumentException {@inheritDoc}\n             */\n            @Override OfPlatform name(String prefix, long start);\n\n            @Override OfPlatform inheritInheritableThreadLocals(boolean inherit);\n            @Override OfPlatform uncaughtExceptionHandler(UncaughtExceptionHandler ueh);\n\n            /**\n             * Sets the thread group.\n             * @param group the thread group\n             * @return this builder\n             */\n            OfPlatform group(ThreadGroup group);\n\n            /**\n             * Sets the daemon status.\n             * @param on {@code true} to create daemon threads\n             * @return this builder\n             */\n            OfPlatform daemon(boolean on);\n\n            /**\n             * Sets the daemon status to {@code true}.\n             * @implSpec The default implementation invokes {@linkplain #daemon(boolean)} with\n             * a value of {@code true}.\n             * @return this builder\n             */\n            default OfPlatform daemon() {\n                return daemon(true);\n            }\n\n            /**\n             * Sets the thread priority.\n             * @param priority priority\n             * @return this builder\n             * @throws IllegalArgumentException if the priority is less than\n             *        {@link Thread#MIN_PRIORITY} or greater than {@link Thread#MAX_PRIORITY}\n             */\n            OfPlatform priority(int priority);\n\n            /**\n             * Sets the desired stack size.\n             *\n             * \u003cp\u003e The stack size is the approximate number of bytes of address space\n             * that the Java virtual machine is to allocate for the thread\u0027s stack. The\n             * effect is highly platform dependent and the Java virtual machine is free\n             * to treat the {@code stackSize} parameter as a \"suggestion\". If the value\n             * is unreasonably low for the platform then a platform specific minimum\n             * may be used. If the value is unreasonably high then a platform specific\n             * maximum may be used. A value of zero is always ignored.\n             *\n             * @param stackSize the desired stack size\n             * @return this builder\n             * @throws IllegalArgumentException if the stack size is negative\n             */\n            OfPlatform stackSize(long stackSize);\n        }\n\n        /**\n         * A builder for creating a virtual {@link Thread} or {@link ThreadFactory}\n         * that creates virtual threads.\n         *\n         * \u003cp\u003e Unless otherwise specified, passing a null argument to a method in\n         * this interface causes a {@code NullPointerException} to be thrown.\n         *\n         * @see Thread#ofVirtual()\n         * @since 21\n         */\n        sealed interface OfVirtual extends Builder\n                permits ThreadBuilders.VirtualThreadBuilder {\n\n            @Override OfVirtual name(String name);\n\n            /**\n             * @throws IllegalArgumentException {@inheritDoc}\n             */\n            @Override OfVirtual name(String prefix, long start);\n\n            @Override OfVirtual inheritInheritableThreadLocals(boolean inherit);\n            @Override OfVirtual uncaughtExceptionHandler(UncaughtExceptionHandler ueh);\n        }\n    }\n\n    /**\n     * Throws CloneNotSupportedException as a Thread can not be meaningfully\n     * cloned. Construct a new Thread instead.\n     *\n     * @throws  CloneNotSupportedException\n     *          always\n     */\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException();\n    }\n\n    /**\n     * Helper class for auto-numbering platform threads. The numbers start at\n     * 0 and are separate from the thread identifier for historical reasons.\n     */\n    private static class ThreadNumbering {\n        private static final Unsafe U;\n        private static final Object NEXT_BASE;\n        private static final long NEXT_OFFSET;\n        static {\n            U \u003d Unsafe.getUnsafe();\n            try {\n                Field nextField \u003d ThreadNumbering.class.getDeclaredField(\"next\");\n                NEXT_BASE \u003d U.staticFieldBase(nextField);\n                NEXT_OFFSET \u003d U.staticFieldOffset(nextField);\n            } catch (NoSuchFieldException e) {\n                throw new ExceptionInInitializerError(e);\n            }\n        }\n        private static volatile int next;\n        static int next() {\n            return U.getAndAddInt(NEXT_BASE, NEXT_OFFSET, 1);\n        }\n    }\n\n    /**\n     * Generates a thread name of the form {@code Thread-\u003cn\u003e}.\n     */\n    static String genThreadName() {\n        return \"Thread-\" + ThreadNumbering.next();\n    }\n\n    /**\n     * Throws NullPointerException if the name is null. Avoids use of\n     * Objects.requireNonNull in early startup.\n     */\n    private static String checkName(String name) {\n        if (name \u003d\u003d null)\n            throw new NullPointerException(\"\u0027name\u0027 is null\");\n        return name;\n    }\n\n    /**\n     * Initializes a new platform {@code Thread}. This constructor has the same\n     * effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n     * {@code (null, null, gname)}, where {@code gname} is a newly generated\n     * name. Automatically generated names are of the form\n     * {@code \"Thread-\"+}\u003ci\u003en\u003c/i\u003e, where \u003ci\u003en\u003c/i\u003e is an integer.\n     *\n     * \u003cp\u003e This constructor is only useful when extending {@code Thread} to\n     * override the {@link #run()} method.\n     *\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread() {\n        this(null, null, 0, null, 0, null);\n    }\n\n    /**\n     * Initializes a new platform {@code Thread}. This constructor has the same\n     * effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n     * {@code (null, task, gname)}, where {@code gname} is a newly generated\n     * name. Automatically generated names are of the form\n     * {@code \"Thread-\"+}\u003ci\u003en\u003c/i\u003e, where \u003ci\u003en\u003c/i\u003e is an integer.\n     *\n     * \u003cp\u003e For a non-null task, invoking this constructor directly is equivalent to:\n     * \u003cpre\u003e{@code Thread.ofPlatform().unstarted(task); }\u003c/pre\u003e\n     *\n     * @param  task\n     *         the object whose {@code run} method is invoked when this thread\n     *         is started. If {@code null}, this classes {@code run} method does\n     *         nothing.\n     *\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread(Runnable task) {\n        this(null, null, 0, task, 0, null);\n    }\n\n    /**\n     * Creates a new Thread that inherits the given AccessControlContext\n     * but thread-local variables are not inherited.\n     * This is not a public constructor.\n     */\n    Thread(Runnable task, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n        this(null, null, 0, task, 0, acc);\n    }\n\n    /**\n     * Initializes a new platform {@code Thread}. This constructor has the same\n     * effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n     * {@code (group, task, gname)}, where {@code gname} is a newly generated\n     * name. Automatically generated names are of the form\n     * {@code \"Thread-\"+}\u003ci\u003en\u003c/i\u003e, where \u003ci\u003en\u003c/i\u003e is an integer.\n     *\n     * \u003cp\u003e For a non-null group and task, invoking this constructor directly is\n     * equivalent to:\n     * \u003cpre\u003e{@code Thread.ofPlatform().group(group).unstarted(task); }\u003c/pre\u003e\n     *\n     * @param  group\n     *         the thread group. If {@code null} and there is a security\n     *         manager, the group is determined by {@linkplain\n     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n     *         If there is not a security manager or {@code\n     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n     *         is set to the current thread\u0027s thread group.\n     *\n     * @param  task\n     *         the object whose {@code run} method is invoked when this thread\n     *         is started. If {@code null}, this thread\u0027s run method is invoked.\n     *\n     * @throws  SecurityException\n     *          if the current thread cannot create a thread in the specified\n     *          thread group\n     *\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread(ThreadGroup group, Runnable task) {\n        this(group, null, 0, task, 0, null);\n    }\n\n    /**\n     * Initializes a new platform {@code Thread}. This constructor has the same\n     * effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n     * {@code (null, null, name)}.\n     *\n     * \u003cp\u003e This constructor is only useful when extending {@code Thread} to\n     * override the {@link #run()} method.\n     *\n     * @param   name\n     *          the name of the new thread\n     *\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread(String name) {\n        this(null, checkName(name), 0, null, 0, null);\n    }\n\n    /**\n     * Initializes a new platform {@code Thread}. This constructor has the same\n     * effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n     * {@code (group, null, name)}.\n     *\n     * \u003cp\u003e This constructor is only useful when extending {@code Thread} to\n     * override the {@link #run()} method.\n     *\n     * @param  group\n     *         the thread group. If {@code null} and there is a security\n     *         manager, the group is determined by {@linkplain\n     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n     *         If there is not a security manager or {@code\n     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n     *         is set to the current thread\u0027s thread group.\n     *\n     * @param  name\n     *         the name of the new thread\n     *\n     * @throws  SecurityException\n     *          if the current thread cannot create a thread in the specified\n     *          thread group\n     *\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread(ThreadGroup group, String name) {\n        this(group, checkName(name), 0, null, 0, null);\n    }\n\n    /**\n     * Initializes a new platform {@code Thread}. This constructor has the same\n     * effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n     * {@code (null, task, name)}.\n     *\n     * \u003cp\u003e For a non-null task and name, invoking this constructor directly is\n     * equivalent to:\n     * \u003cpre\u003e{@code Thread.ofPlatform().name(name).unstarted(task); }\u003c/pre\u003e\n     *\n     * @param  task\n     *         the object whose {@code run} method is invoked when this thread\n     *         is started. If {@code null}, this thread\u0027s run method is invoked.\n     *\n     * @param  name\n     *         the name of the new thread\n     *\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread(Runnable task, String name) {\n        this(null, checkName(name), 0, task, 0, null);\n    }\n\n    /**\n     * Initializes a new platform {@code Thread} so that it has {@code task}\n     * as its run object, has the specified {@code name} as its name,\n     * and belongs to the thread group referred to by {@code group}.\n     *\n     * \u003cp\u003eIf there is a security manager, its\n     * {@link SecurityManager#checkAccess(ThreadGroup) checkAccess}\n     * method is invoked with the ThreadGroup as its argument.\n     *\n     * \u003cp\u003eIn addition, its {@code checkPermission} method is invoked with\n     * the {@code RuntimePermission(\"enableContextClassLoaderOverride\")}\n     * permission when invoked directly or indirectly by the constructor\n     * of a subclass which overrides the {@code getContextClassLoader}\n     * or {@code setContextClassLoader} methods.\n     *\n     * \u003cp\u003eThe priority of the newly created thread is the smaller of\n     * priority of the thread creating it and the maximum permitted\n     * priority of the thread group. The method {@linkplain #setPriority\n     * setPriority} may be used to change the priority to a new value.\n     *\n     * \u003cp\u003eThe newly created thread is initially marked as being a daemon\n     * thread if and only if the thread creating it is currently marked\n     * as a daemon thread. The method {@linkplain #setDaemon setDaemon}\n     * may be used to change whether or not a thread is a daemon.\n     *\n     * \u003cp\u003eFor a non-null group, task, and name, invoking this constructor directly\n     * is equivalent to:\n     * \u003cpre\u003e{@code Thread.ofPlatform().group(group).name(name).unstarted(task); }\u003c/pre\u003e\n     *\n     * @param  group\n     *         the thread group. If {@code null} and there is a security\n     *         manager, the group is determined by {@linkplain\n     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n     *         If there is not a security manager or {@code\n     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n     *         is set to the current thread\u0027s thread group.\n     *\n     * @param  task\n     *         the object whose {@code run} method is invoked when this thread\n     *         is started. If {@code null}, this thread\u0027s run method is invoked.\n     *\n     * @param  name\n     *         the name of the new thread\n     *\n     * @throws  SecurityException\n     *          if the current thread cannot create a thread in the specified\n     *          thread group or cannot override the context class loader methods.\n     *\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread(ThreadGroup group, Runnable task, String name) {\n        this(group, checkName(name), 0, task, 0, null);\n    }\n\n    /**\n     * Initializes a new platform {@code Thread} so that it has {@code task}\n     * as its run object, has the specified {@code name} as its name,\n     * and belongs to the thread group referred to by {@code group}, and has\n     * the specified \u003ci\u003estack size\u003c/i\u003e.\n     *\n     * \u003cp\u003eThis constructor is identical to {@link\n     * #Thread(ThreadGroup,Runnable,String)} with the exception of the fact\n     * that it allows the thread stack size to be specified.  The stack size\n     * is the approximate number of bytes of address space that the virtual\n     * machine is to allocate for this thread\u0027s stack.  \u003cb\u003eThe effect of the\n     * {@code stackSize} parameter, if any, is highly platform dependent.\u003c/b\u003e\n     *\n     * \u003cp\u003eOn some platforms, specifying a higher value for the\n     * {@code stackSize} parameter may allow a thread to achieve greater\n     * recursion depth before throwing a {@link StackOverflowError}.\n     * Similarly, specifying a lower value may allow a greater number of\n     * threads to exist concurrently without throwing an {@link\n     * OutOfMemoryError} (or other internal error).  The details of\n     * the relationship between the value of the {@code stackSize} parameter\n     * and the maximum recursion depth and concurrency level are\n     * platform-dependent.  \u003cb\u003eOn some platforms, the value of the\n     * {@code stackSize} parameter may have no effect whatsoever.\u003c/b\u003e\n     *\n     * \u003cp\u003eThe virtual machine is free to treat the {@code stackSize}\n     * parameter as a suggestion.  If the specified value is unreasonably low\n     * for the platform, the virtual machine may instead use some\n     * platform-specific minimum value; if the specified value is unreasonably\n     * high, the virtual machine may instead use some platform-specific\n     * maximum.  Likewise, the virtual machine is free to round the specified\n     * value up or down as it sees fit (or to ignore it completely).\n     *\n     * \u003cp\u003eSpecifying a value of zero for the {@code stackSize} parameter will\n     * cause this constructor to behave exactly like the\n     * {@code Thread(ThreadGroup, Runnable, String)} constructor.\n     *\n     * \u003cp\u003e\u003ci\u003eDue to the platform-dependent nature of the behavior of this\n     * constructor, extreme care should be exercised in its use.\n     * The thread stack size necessary to perform a given computation will\n     * likely vary from one JRE implementation to another.  In light of this\n     * variation, careful tuning of the stack size parameter may be required,\n     * and the tuning may need to be repeated for each JRE implementation on\n     * which an application is to run.\u003c/i\u003e\n     *\n     * \u003cp\u003eImplementation note: Java platform implementers are encouraged to\n     * document their implementation\u0027s behavior with respect to the\n     * {@code stackSize} parameter.\n     *\n     * \u003cp\u003eFor a non-null group, task, and name, invoking this constructor directly\n     * is equivalent to:\n     * \u003cpre\u003e{@code Thread.ofPlatform().group(group).name(name).stackSize(stackSize).unstarted(task); }\u003c/pre\u003e\n     *\n     * @param  group\n     *         the thread group. If {@code null} and there is a security\n     *         manager, the group is determined by {@linkplain\n     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n     *         If there is not a security manager or {@code\n     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n     *         is set to the current thread\u0027s thread group.\n     *\n     * @param  task\n     *         the object whose {@code run} method is invoked when this thread\n     *         is started. If {@code null}, this thread\u0027s run method is invoked.\n     *\n     * @param  name\n     *         the name of the new thread\n     *\n     * @param  stackSize\n     *         the desired stack size for the new thread, or zero to indicate\n     *         that this parameter is to be ignored.\n     *\n     * @throws  SecurityException\n     *          if the current thread cannot create a thread in the specified\n     *          thread group\n     *\n     * @since 1.4\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread(ThreadGroup group, Runnable task, String name, long stackSize) {\n        this(group, checkName(name), 0, task, stackSize, null);\n    }\n\n    /**\n     * Initializes a new platform {@code Thread} so that it has {@code task}\n     * as its run object, has the specified {@code name} as its name,\n     * belongs to the thread group referred to by {@code group}, has\n     * the specified {@code stackSize}, and inherits initial values for\n     * {@linkplain InheritableThreadLocal inheritable thread-local} variables\n     * if {@code inheritThreadLocals} is {@code true}.\n     *\n     * \u003cp\u003e This constructor is identical to {@link\n     * #Thread(ThreadGroup,Runnable,String,long)} with the added ability to\n     * suppress, or not, the inheriting of initial values for inheritable\n     * thread-local variables from the constructing thread. This allows for\n     * finer grain control over inheritable thread-locals. Care must be taken\n     * when passing a value of {@code false} for {@code inheritThreadLocals},\n     * as it may lead to unexpected behavior if the new thread executes code\n     * that expects a specific thread-local value to be inherited.\n     *\n     * \u003cp\u003e Specifying a value of {@code true} for the {@code inheritThreadLocals}\n     * parameter will cause this constructor to behave exactly like the\n     * {@code Thread(ThreadGroup, Runnable, String, long)} constructor.\n     *\n     * \u003cp\u003e For a non-null group, task, and name, invoking this constructor directly\n     * is equivalent to:\n     * \u003cpre\u003e{@code Thread.ofPlatform()\n     *      .group(group)\n     *      .name(name)\n     *      .stackSize(stackSize)\n     *      .inheritInheritableThreadLocals(inheritInheritableThreadLocals)\n     *      .unstarted(task); }\u003c/pre\u003e\n     *\n     * @param  group\n     *         the thread group. If {@code null} and there is a security\n     *         manager, the group is determined by {@linkplain\n     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n     *         If there is not a security manager or {@code\n     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n     *         is set to the current thread\u0027s thread group.\n     *\n     * @param  task\n     *         the object whose {@code run} method is invoked when this thread\n     *         is started. If {@code null}, this thread\u0027s run method is invoked.\n     *\n     * @param  name\n     *         the name of the new thread\n     *\n     * @param  stackSize\n     *         the desired stack size for the new thread, or zero to indicate\n     *         that this parameter is to be ignored\n     *\n     * @param  inheritInheritableThreadLocals\n     *         if {@code true}, inherit initial values for inheritable\n     *         thread-locals from the constructing thread, otherwise no initial\n     *         values are inherited\n     *\n     * @throws  SecurityException\n     *          if the current thread cannot create a thread in the specified\n     *          thread group\n     *\n     * @since 9\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     */\n    public Thread(ThreadGroup group, Runnable task, String name,\n                  long stackSize, boolean inheritInheritableThreadLocals) {\n        this(group, checkName(name),\n                (inheritInheritableThreadLocals ? 0 : NO_INHERIT_THREAD_LOCALS),\n                task, stackSize, null);\n    }\n\n    /**\n     * Creates a virtual thread to execute a task and schedules it to execute.\n     *\n     * \u003cp\u003e This method is equivalent to:\n     * \u003cpre\u003e{@code Thread.ofVirtual().start(task); }\u003c/pre\u003e\n     *\n     * @param task the object to run when the thread executes\n     * @return a new, and started, virtual thread\n     * @see \u003ca href\u003d\"#inheritance\"\u003eInheritance when creating threads\u003c/a\u003e\n     * @since 21\n     */\n    public static Thread startVirtualThread(Runnable task) {\n        Objects.requireNonNull(task);\n        var thread \u003d ThreadBuilders.newVirtualThread(null, null, 0, task);\n        thread.start();\n        return thread;\n    }\n\n    /**\n     * Returns {@code true} if this thread is a virtual thread. A virtual thread\n     * is scheduled by the Java virtual machine rather than the operating system.\n     *\n     * @return {@code true} if this thread is a virtual thread\n     *\n     * @since 21\n     */\n    public final boolean isVirtual() {\n        return (this instanceof BaseVirtualThread);\n    }\n\n    /**\n     * Schedules this thread to begin execution. The thread will execute\n     * independently of the current thread.\n     *\n     * \u003cp\u003e A thread can be started at most once. In particular, a thread can not\n     * be restarted after it has terminated.\n     *\n     * @throws IllegalThreadStateException if the thread was already started\n     */\n    public void start() {\n        synchronized (this) {\n            // zero status corresponds to state \"NEW\".\n            if (holder.threadStatus !\u003d 0)\n                throw new IllegalThreadStateException();\n            start0();\n        }\n    }\n\n    /**\n     * Schedules this thread to begin execution in the given thread container.\n     * @throws IllegalStateException if the container is shutdown or closed\n     * @throws IllegalThreadStateException if the thread has already been started\n     */\n    void start(ThreadContainer container) {\n        synchronized (this) {\n            // zero status corresponds to state \"NEW\".\n            if (holder.threadStatus !\u003d 0)\n                throw new IllegalThreadStateException();\n\n            // bind thread to container\n            if (this.container !\u003d null)\n                throw new IllegalThreadStateException();\n            setThreadContainer(container);\n\n            // start thread\n            boolean started \u003d false;\n            container.onStart(this);  // may throw\n            try {\n                // scoped values may be inherited\n                inheritScopedValueBindings(container);\n\n                start0();\n                started \u003d true;\n            } finally {\n                if (!started) {\n                    container.onExit(this);\n                }\n            }\n        }\n    }\n\n    private native void start0();\n\n    /**\n     * This method is run by the thread when it executes. Subclasses of {@code\n     * Thread} may override this method.\n     *\n     * \u003cp\u003e This method is not intended to be invoked directly. If this thread is a\n     * platform thread created with a {@link Runnable} task then invoking this method\n     * will invoke the task\u0027s {@code run} method. If this thread is a virtual thread\n     * then invoking this method directly does nothing.\n     *\n     * @implSpec The default implementation executes the {@link Runnable} task that\n     * the {@code Thread} was created with. If the thread was created without a task\n     * then this method does nothing.\n     */\n    @Override\n    public void run() {\n        Runnable task \u003d holder.task;\n        if (task !\u003d null) {\n            Object bindings \u003d scopedValueBindings();\n            runWith(bindings, task);\n        }\n    }\n\n    /**\n     * The VM recognizes this method as special, so any changes to the\n     * name or signature require corresponding changes in\n     * JVM_FindScopedValueBindings().\n     */\n    @Hidden\n    @ForceInline\n    final void runWith(Object bindings, Runnable op) {\n        ensureMaterializedForStackWalk(bindings);\n        op.run();\n        Reference.reachabilityFence(bindings);\n    }\n\n    /**\n     * Null out reference after Thread termination.\n     */\n    void clearReferences() {\n        threadLocals \u003d null;\n        inheritableThreadLocals \u003d null;\n        inheritedAccessControlContext \u003d null;\n        if (uncaughtExceptionHandler !\u003d null)\n            uncaughtExceptionHandler \u003d null;\n        if (nioBlocker !\u003d null)\n            nioBlocker \u003d null;\n    }\n\n    /**\n     * This method is called by the VM to give a Thread\n     * a chance to clean up before it actually exits.\n     */\n    private void exit() {\n        try {\n            // pop any remaining scopes from the stack, this may block\n            if (headStackableScopes !\u003d null) {\n                StackableScope.popAll();\n            }\n        } finally {\n            // notify container that thread is exiting\n            ThreadContainer container \u003d threadContainer();\n            if (container !\u003d null) {\n                container.onExit(this);\n            }\n        }\n\n        try {\n            if (threadLocals !\u003d null \u0026\u0026 TerminatingThreadLocal.REGISTRY.isPresent()) {\n                TerminatingThreadLocal.threadTerminated();\n            }\n        } finally {\n            clearReferences();\n        }\n    }\n\n    /**\n     * Throws {@code UnsupportedOperationException}.\n     *\n     * @throws  UnsupportedOperationException always\n     *\n     * @deprecated This method was originally specified to \"stop\" a victim\n     *       thread by causing the victim thread to throw a {@link ThreadDeath}.\n     *       It was inherently unsafe. Stopping a thread caused it to unlock\n     *       all of the monitors that it had locked (as a natural consequence\n     *       of the {@code ThreadDeath} exception propagating up the stack). If\n     *       any of the objects previously protected by these monitors were in\n     *       an inconsistent state, the damaged objects became visible to\n     *       other threads, potentially resulting in arbitrary behavior.\n     *       Usages of {@code stop} should be replaced by code that simply\n     *       modifies some variable to indicate that the target thread should\n     *       stop running.  The target thread should check this variable\n     *       regularly, and return from its run method in an orderly fashion\n     *       if the variable indicates that it is to stop running.  If the\n     *       target thread waits for long periods (on a condition variable,\n     *       for example), the {@code interrupt} method should be used to\n     *       interrupt the wait.\n     *       For more information, see\n     *       \u003ca href\u003d\"{@docRoot}/java.base/java/lang/doc-files/threadPrimitiveDeprecation.html\"\u003eWhy\n     *       are Thread.stop, Thread.suspend and Thread.resume Deprecated?\u003c/a\u003e.\n     */\n    @Deprecated(since\u003d\"1.2\", forRemoval\u003dtrue)\n    public final void stop() {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * Interrupts this thread.\n     *\n     * \u003cp\u003e Unless the current thread is interrupting itself, which is\n     * always permitted, the {@link #checkAccess() checkAccess} method\n     * of this thread is invoked, which may cause a {@link\n     * SecurityException} to be thrown.\n     *\n     * \u003cp\u003e If this thread is blocked in an invocation of the {@link\n     * Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link\n     * Object#wait(long, int) wait(long, int)} methods of the {@link Object}\n     * class, or of the {@link #join()}, {@link #join(long)}, {@link\n     * #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)}\n     * methods of this class, then its interrupt status will be cleared and it\n     * will receive an {@link InterruptedException}.\n     *\n     * \u003cp\u003e If this thread is blocked in an I/O operation upon an {@link\n     * java.nio.channels.InterruptibleChannel InterruptibleChannel}\n     * then the channel will be closed, the thread\u0027s interrupt\n     * status will be set, and the thread will receive a {@link\n     * java.nio.channels.ClosedByInterruptException}.\n     *\n     * \u003cp\u003e If this thread is blocked in a {@link java.nio.channels.Selector}\n     * then the thread\u0027s interrupt status will be set and it will return\n     * immediately from the selection operation, possibly with a non-zero\n     * value, just as if the selector\u0027s {@link\n     * java.nio.channels.Selector#wakeup wakeup} method were invoked.\n     *\n     * \u003cp\u003e If none of the previous conditions hold then this thread\u0027s interrupt\n     * status will be set. \u003c/p\u003e\n     *\n     * \u003cp\u003e Interrupting a thread that is not alive need not have any effect.\n     *\n     * @implNote In the JDK Reference Implementation, interruption of a thread\n     * that is not alive still records that the interrupt request was made and\n     * will report it via {@link #interrupted()} and {@link #isInterrupted()}.\n     *\n     * @throws  SecurityException\n     *          if the current thread cannot modify this thread\n     *\n     * @revised 6.0, 14\n     */\n    public void interrupt() {\n        if (this !\u003d Thread.currentThread()) {\n            checkAccess();\n\n            // thread may be blocked in an I/O operation\n            synchronized (interruptLock) {\n                Interruptible b \u003d nioBlocker;\n                if (b !\u003d null) {\n                    interrupted \u003d true;\n                    interrupt0();  // inform VM of interrupt\n                    b.interrupt(this);\n                    return;\n                }\n            }\n        }\n        interrupted \u003d true;\n        interrupt0();  // inform VM of interrupt\n    }\n\n    /**\n     * Tests whether the current thread has been interrupted.  The\n     * \u003ci\u003einterrupted status\u003c/i\u003e of the thread is cleared by this method.  In\n     * other words, if this method were to be called twice in succession, the\n     * second call would return false (unless the current thread were\n     * interrupted again, after the first call had cleared its interrupted\n     * status and before the second call had examined it).\n     *\n     * @return  {@code true} if the current thread has been interrupted;\n     *          {@code false} otherwise.\n     * @see #isInterrupted()\n     * @revised 6.0, 14\n     */\n    public static boolean interrupted() {\n        return currentThread().getAndClearInterrupt();\n    }\n\n    /**\n     * Tests whether this thread has been interrupted.  The \u003ci\u003einterrupted\n     * status\u003c/i\u003e of the thread is unaffected by this method.\n     *\n     * @return  {@code true} if this thread has been interrupted;\n     *          {@code false} otherwise.\n     * @see     #interrupted()\n     * @revised 6.0, 14\n     */\n    public boolean isInterrupted() {\n        return interrupted;\n    }\n\n    final void setInterrupt() {\n        // assert Thread.currentCarrierThread() \u003d\u003d this;\n        if (!interrupted) {\n            interrupted \u003d true;\n            interrupt0();  // inform VM of interrupt\n        }\n    }\n\n    final void clearInterrupt() {\n        // assert Thread.currentCarrierThread() \u003d\u003d this;\n        if (interrupted) {\n            interrupted \u003d false;\n            clearInterruptEvent();\n        }\n    }\n\n    boolean getAndClearInterrupt() {\n        boolean oldValue \u003d interrupted;\n        // We may have been interrupted the moment after we read the field,\n        // so only clear the field if we saw that it was set and will return\n        // true; otherwise we could lose an interrupt.\n        if (oldValue) {\n            interrupted \u003d false;\n            clearInterruptEvent();\n        }\n        return oldValue;\n    }\n\n    /**\n     * Tests if this thread is alive. A thread is alive if it has\n     * been started and has not yet terminated.\n     *\n     * @return  {@code true} if this thread is alive;\n     *          {@code false} otherwise.\n     */\n    public final boolean isAlive() {\n        return alive();\n    }\n\n    /**\n     * Returns true if this thread is alive.\n     * This method is non-final so it can be overridden.\n     */\n    boolean alive() {\n        return eetop !\u003d 0;\n    }\n\n    /**\n     * Throws {@code UnsupportedOperationException}.\n     *\n     * @throws  UnsupportedOperationException always\n     *\n     * @deprecated This method was originally specified to suspend a thread.\n     *     It was inherently deadlock-prone. If the target thread held a lock on\n     *     a monitor protecting a critical system resource when it was suspended,\n     *     no thread could access the resource until the target thread was resumed.\n     *     If the thread intending to resume the target thread attempted to lock\n     *     the monitor prior to calling {@code resume}, deadlock would result.\n     *     Such deadlocks typically manifested themselves as \"frozen\" processes.\n     *     For more information, see\n     *     \u003ca href\u003d\"{@docRoot}/java.base/java/lang/doc-files/threadPrimitiveDeprecation.html\"\u003eWhy\n     *     are Thread.stop, Thread.suspend and Thread.resume Deprecated?\u003c/a\u003e.\n     */\n    @Deprecated(since\u003d\"1.2\", forRemoval\u003dtrue)\n    public final void suspend() {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * Throws {@code UnsupportedOperationException}.\n     *\n     * @throws  UnsupportedOperationException always\n     *\n     * @deprecated This method was originally specified to resume a thread\n     *     suspended with {@link #suspend()}. Suspending a thread was\n     *     inherently deadlock-prone.\n     *     For more information, see\n     *     \u003ca href\u003d\"{@docRoot}/java.base/java/lang/doc-files/threadPrimitiveDeprecation.html\"\u003eWhy\n     *     are Thread.stop, Thread.suspend and Thread.resume Deprecated?\u003c/a\u003e.\n     */\n    @Deprecated(since\u003d\"1.2\", forRemoval\u003dtrue)\n    public final void resume() {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * Changes the priority of this thread.\n     *\n     * For platform threads, the priority is set to the smaller of the specified\n     * {@code newPriority} and the maximum permitted priority of the thread\u0027s\n     * {@linkplain ThreadGroup thread group}.\n     *\n     * The priority of a virtual thread is always {@link Thread#NORM_PRIORITY}\n     * and {@code newPriority} is ignored.\n     *\n     * @param newPriority the new thread priority\n     * @throws  IllegalArgumentException if the priority is not in the\n     *          range {@code MIN_PRIORITY} to {@code MAX_PRIORITY}.\n     * @throws  SecurityException\n     *          if {@link #checkAccess} determines that the current\n     *          thread cannot modify this thread\n     * @see #setPriority(int)\n     * @see ThreadGroup#getMaxPriority()\n     */\n    public final void setPriority(int newPriority) {\n        checkAccess();\n        if (newPriority \u003e MAX_PRIORITY || newPriority \u003c MIN_PRIORITY) {\n            throw new IllegalArgumentException();\n        }\n        if (!isVirtual()) {\n            priority(newPriority);\n        }\n    }\n\n    void priority(int newPriority) {\n        ThreadGroup g \u003d holder.group;\n        if (g !\u003d null) {\n            int maxPriority \u003d g.getMaxPriority();\n            if (newPriority \u003e maxPriority) {\n                newPriority \u003d maxPriority;\n            }\n            setPriority0(holder.priority \u003d newPriority);\n        }\n    }\n\n    /**\n     * Returns this thread\u0027s priority.\n     *\n     * \u003cp\u003e The priority of a virtual thread is always {@link Thread#NORM_PRIORITY}.\n     *\n     * @return  this thread\u0027s priority.\n     * @see     #setPriority\n     */\n    public final int getPriority() {\n        if (isVirtual()) {\n            return Thread.NORM_PRIORITY;\n        } else {\n            return holder.priority;\n        }\n    }\n\n    /**\n     * Changes the name of this thread to be equal to the argument {@code name}.\n     * \u003cp\u003e\n     * First the {@code checkAccess} method of this thread is called\n     * with no arguments. This may result in throwing a\n     * {@code SecurityException}.\n     *\n     * @implNote In the JDK Reference Implementation, if this thread is the\n     * current thread, and it\u0027s a platform thread that was not attached to the\n     * VM with the Java Native Interface\n     * \u003ca href\u003d\"{@docRoot}/../specs/jni/invocation.html#attachcurrentthread\"\u003e\n     * AttachCurrentThread\u003c/a\u003e function, then this method will set the operating\n     * system thread name. This may be useful for debugging and troubleshooting\n     * purposes.\n     *\n     * @param      name   the new name for this thread.\n     * @throws     SecurityException  if the current thread cannot modify this\n     *             thread.\n     *\n     * @spec jni/index.html Java Native Interface Specification\n     * @see        #getName\n     * @see        #checkAccess()\n     */\n    public final synchronized void setName(String name) {\n        checkAccess();\n        if (name \u003d\u003d null) {\n            throw new NullPointerException(\"name cannot be null\");\n        }\n        this.name \u003d name;\n        if (!isVirtual() \u0026\u0026 Thread.currentThread() \u003d\u003d this) {\n            setNativeName(name);\n        }\n    }\n\n    /**\n     * Returns this thread\u0027s name.\n     *\n     * @return  this thread\u0027s name.\n     * @see     #setName(String)\n     */\n    public final String getName() {\n        return name;\n    }\n\n    /**\n     * Returns the thread\u0027s thread group or {@code null} if the thread has\n     * terminated.\n     *\n     * \u003cp\u003e The thread group returned for a virtual thread is the special\n     * \u003ca href\u003d\"ThreadGroup.html#virtualthreadgroup\"\u003e\u003cem\u003eThreadGroup for\n     * virtual threads\u003c/em\u003e\u003c/a\u003e.\n     *\n     * @return  this thread\u0027s thread group or {@code null}\n     */\n    public final ThreadGroup getThreadGroup() {\n        if (isTerminated()) {\n            return null;\n        } else {\n            return isVirtual() ? virtualThreadGroup() : holder.group;\n        }\n    }\n\n    /**\n     * Returns an estimate of the number of {@linkplain #isAlive() live}\n     * platform threads in the current thread\u0027s thread group and its subgroups.\n     * Virtual threads are not included in the estimate.\n     *\n     * \u003cp\u003e The value returned is only an estimate because the number of\n     * threads may change dynamically while this method traverses internal\n     * data structures, and might be affected by the presence of certain\n     * system threads. This method is intended primarily for debugging\n     * and monitoring purposes.\n     *\n     * @return  an estimate of the number of live platform threads in the\n     *          current thread\u0027s thread group and in any other thread group\n     *          that has the current thread\u0027s thread group as an ancestor\n     */\n    public static int activeCount() {\n        return currentThread().getThreadGroup().activeCount();\n    }\n\n    /**\n     * Copies into the specified array every {@linkplain #isAlive() live}\n     * platform thread in the current thread\u0027s thread group and its subgroups.\n     * This method simply invokes the {@link java.lang.ThreadGroup#enumerate(Thread[])}\n     * method of the current thread\u0027s thread group. Virtual threads are\n     * not enumerated by this method.\n     *\n     * \u003cp\u003e An application might use the {@linkplain #activeCount activeCount}\n     * method to get an estimate of how big the array should be, however\n     * \u003ci\u003eif the array is too short to hold all the threads, the extra threads\n     * are silently ignored.\u003c/i\u003e  If it is critical to obtain every live\n     * thread in the current thread\u0027s thread group and its subgroups, the\n     * invoker should verify that the returned int value is strictly less\n     * than the length of {@code tarray}.\n     *\n     * \u003cp\u003e Due to the inherent race condition in this method, it is recommended\n     * that the method only be used for debugging and monitoring purposes.\n     *\n     * @param  tarray\n     *         an array into which to put the list of threads\n     *\n     * @return  the number of threads put into the array\n     *\n     * @throws  SecurityException\n     *          if {@link java.lang.ThreadGroup#checkAccess} determines that\n     *          the current thread cannot access its thread group\n     */\n    public static int enumerate(Thread[] tarray) {\n        return currentThread().getThreadGroup().enumerate(tarray);\n    }\n\n    /**\n     * Throws {@code UnsupportedOperationException}.\n     *\n     * @return     nothing\n     *\n     * @deprecated This method was originally designed to count the number of\n     *             stack frames but the results were never well-defined and it\n     *             depended on thread-suspension.\n     *             This method is subject to removal in a future version of Java SE.\n     * @see        StackWalker\n     */\n    @Deprecated(since\u003d\"1.2\", forRemoval\u003dtrue)\n    public int countStackFrames() {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * Waits at most {@code millis} milliseconds for this thread to terminate.\n     * A timeout of {@code 0} means to wait forever.\n     * This method returns immediately, without waiting, if the thread has not\n     * been {@link #start() started}.\n     *\n     * @implNote\n     * For platform threads, the implementation uses a loop of {@code this.wait}\n     * calls conditioned on {@code this.isAlive}. As a thread terminates the\n     * {@code this.notifyAll} method is invoked. It is recommended that\n     * applications not use {@code wait}, {@code notify}, or\n     * {@code notifyAll} on {@code Thread} instances.\n     *\n     * @param  millis\n     *         the time to wait in milliseconds\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public final void join(long millis) throws InterruptedException {\n        if (millis \u003c 0)\n            throw new IllegalArgumentException(\"timeout value is negative\");\n\n        if (this instanceof VirtualThread vthread) {\n            if (isAlive()) {\n                long nanos \u003d MILLISECONDS.toNanos(millis);\n                vthread.joinNanos(nanos);\n            }\n            return;\n        }\n\n        synchronized (this) {\n            if (millis \u003e 0) {\n                if (isAlive()) {\n                    final long startTime \u003d System.nanoTime();\n                    long delay \u003d millis;\n                    do {\n                        wait(delay);\n                    } while (isAlive() \u0026\u0026 (delay \u003d millis -\n                             NANOSECONDS.toMillis(System.nanoTime() - startTime)) \u003e 0);\n                }\n            } else {\n                while (isAlive()) {\n                    wait(0);\n                }\n            }\n        }\n    }\n\n    /**\n     * Waits at most {@code millis} milliseconds plus\n     * {@code nanos} nanoseconds for this thread to terminate.\n     * If both arguments are {@code 0}, it means to wait forever.\n     * This method returns immediately, without waiting, if the thread has not\n     * been {@link #start() started}.\n     *\n     * @implNote\n     * For platform threads, the implementation uses a loop of {@code this.wait}\n     * calls conditioned on {@code this.isAlive}. As a thread terminates the\n     * {@code this.notifyAll} method is invoked. It is recommended that\n     * applications not use {@code wait}, {@code notify}, or\n     * {@code notifyAll} on {@code Thread} instances.\n     *\n     * @param  millis\n     *         the time to wait in milliseconds\n     *\n     * @param  nanos\n     *         {@code 0-999999} additional nanoseconds to wait\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative, or the value\n     *          of {@code nanos} is not in the range {@code 0-999999}\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public final void join(long millis, int nanos) throws InterruptedException {\n        if (millis \u003c 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos \u003c 0 || nanos \u003e 999999) {\n            throw new IllegalArgumentException(\"nanosecond timeout value out of range\");\n        }\n\n        if (this instanceof VirtualThread vthread) {\n            if (isAlive()) {\n                // convert arguments to a total in nanoseconds\n                long totalNanos \u003d MILLISECONDS.toNanos(millis);\n                totalNanos +\u003d Math.min(Long.MAX_VALUE - totalNanos, nanos);\n                vthread.joinNanos(totalNanos);\n            }\n            return;\n        }\n\n        if (nanos \u003e 0 \u0026\u0026 millis \u003c Long.MAX_VALUE) {\n            millis++;\n        }\n        join(millis);\n    }\n\n    /**\n     * Waits for this thread to terminate.\n     *\n     * \u003cp\u003e An invocation of this method behaves in exactly the same\n     * way as the invocation\n     *\n     * \u003cblockquote\u003e\n     * {@linkplain #join(long) join}{@code (0)}\n     * \u003c/blockquote\u003e\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public final void join() throws InterruptedException {\n        join(0);\n    }\n\n    /**\n     * Waits for this thread to terminate for up to the given waiting duration.\n     *\n     * \u003cp\u003e This method does not wait if the duration to wait is less than or\n     * equal to zero. In this case, the method just tests if the thread has\n     * terminated.\n     *\n     * @param   duration\n     *          the maximum duration to wait\n     *\n     * @return  {@code true} if the thread has terminated, {@code false} if the\n     *          thread has not terminated\n     *\n     * @throws  InterruptedException\n     *          if the current thread is interrupted while waiting.\n     *          The \u003ci\u003einterrupted status\u003c/i\u003e of the current thread is cleared\n     *          when this exception is thrown.\n     *\n     * @throws  IllegalThreadStateException\n     *          if this thread has not been started.\n     *\n     * @since 19\n     */\n    public final boolean join(Duration duration) throws InterruptedException {\n        long nanos \u003d NANOSECONDS.convert(duration); // MAX_VALUE if \u003e 292 years\n\n        Thread.State state \u003d threadState();\n        if (state \u003d\u003d State.NEW)\n            throw new IllegalThreadStateException(\"Thread not started\");\n        if (state \u003d\u003d State.TERMINATED)\n            return true;\n        if (nanos \u003c\u003d 0)\n            return false;\n\n        if (this instanceof VirtualThread vthread) {\n            return vthread.joinNanos(nanos);\n        }\n\n        // convert to milliseconds\n        long millis \u003d MILLISECONDS.convert(nanos, NANOSECONDS);\n        if (nanos \u003e NANOSECONDS.convert(millis, MILLISECONDS)) {\n            millis +\u003d 1L;\n        }\n        join(millis);\n        return isTerminated();\n    }\n\n    /**\n     * Prints a stack trace of the current thread to the standard error stream.\n     * This method is useful for debugging.\n     */\n    public static void dumpStack() {\n        new Exception(\"Stack trace\").printStackTrace();\n    }\n\n    /**\n     * Marks this thread as either a \u003ci\u003edaemon\u003c/i\u003e or \u003ci\u003enon-daemon\u003c/i\u003e thread.\n     * The \u003ca href\u003d\"Runtime.html#shutdown\"\u003eshutdown sequence\u003c/a\u003e begins when all\n     * started non-daemon threads have terminated.\n     *\n     * \u003cp\u003e The daemon status of a virtual thread is always {@code true} and cannot be\n     * changed by this method to {@code false}.\n     *\n     * \u003cp\u003e This method must be invoked before the thread is started. The behavior\n     * of this method when the thread has terminated is not specified.\n     *\n     * @param  on\n     *         if {@code true}, marks this thread as a daemon thread\n     *\n     * @throws  IllegalArgumentException\n     *          if this is a virtual thread and {@code on} is false\n     * @throws  IllegalThreadStateException\n     *          if this thread is {@linkplain #isAlive alive}\n     * @throws  SecurityException\n     *          if {@link #checkAccess} determines that the current\n     *          thread cannot modify this thread\n     */\n    public final void setDaemon(boolean on) {\n        checkAccess();\n        if (isVirtual() \u0026\u0026 !on)\n            throw new IllegalArgumentException(\"\u0027false\u0027 not legal for virtual threads\");\n        if (isAlive())\n            throw new IllegalThreadStateException();\n        if (!isVirtual())\n            daemon(on);\n    }\n\n    void daemon(boolean on) {\n        holder.daemon \u003d on;\n    }\n\n    /**\n     * Tests if this thread is a daemon thread.\n     * The daemon status of a virtual thread is always {@code true}.\n     *\n     * @return  {@code true} if this thread is a daemon thread;\n     *          {@code false} otherwise.\n     * @see     #setDaemon(boolean)\n     */\n    public final boolean isDaemon() {\n        if (isVirtual()) {\n            return true;\n        } else {\n            return holder.daemon;\n        }\n    }\n\n    /**\n     * Determines if the currently running thread has permission to\n     * modify this thread.\n     * \u003cp\u003e\n     * If there is a security manager, its {@code checkAccess} method\n     * is called with this thread as its argument. This may result in\n     * throwing a {@code SecurityException}.\n     *\n     * @throws  SecurityException  if the current thread is not allowed to\n     *          access this thread.\n     * @see        SecurityManager#checkAccess(Thread)\n     * @deprecated This method is only useful in conjunction with\n     *       {@linkplain SecurityManager the Security Manager}, which is\n     *       deprecated and subject to removal in a future release.\n     *       Consequently, this method is also deprecated and subject to\n     *       removal. There is no replacement for the Security Manager or this\n     *       method.\n     */\n    @Deprecated(since\u003d\"17\", forRemoval\u003dtrue)\n    public final void checkAccess() {\n        @SuppressWarnings(\"removal\")\n        SecurityManager security \u003d System.getSecurityManager();\n        if (security !\u003d null) {\n            security.checkAccess(this);\n        }\n    }\n\n    /**\n     * Returns a string representation of this thread. The string representation\n     * will usually include the thread\u0027s {@linkplain #threadId() identifier} and\n     * name. The default implementation for platform threads includes the thread\u0027s\n     * identifier, name, priority, and the name of the thread group.\n     *\n     * @return  a string representation of this thread.\n     */\n    public String toString() {\n        StringBuilder sb \u003d new StringBuilder(\"Thread[#\");\n        sb.append(threadId());\n        sb.append(\",\");\n        sb.append(getName());\n        sb.append(\",\");\n        sb.append(getPriority());\n        sb.append(\",\");\n        ThreadGroup group \u003d getThreadGroup();\n        if (group !\u003d null)\n            sb.append(group.getName());\n        sb.append(\"]\");\n        return sb.toString();\n    }\n\n    /**\n     * Returns the context {@code ClassLoader} for this thread.\n     * The context {@code ClassLoader} may be set by the creator of the thread\n     * for use by code running in this thread when loading classes and resources.\n     * If not {@linkplain #setContextClassLoader set}, the default is to inherit\n     * the context class loader from the parent thread.\n     *\n     * \u003cp\u003e The context {@code ClassLoader} of the primordial thread is typically\n     * set to the class loader used to load the application.\n     *\n     * @return  the context {@code ClassLoader} for this thread, or {@code null}\n     *          indicating the system class loader (or, failing that, the\n     *          bootstrap class loader)\n     *\n     * @throws  SecurityException\n     *          if a security manager is present, and the caller\u0027s class loader\n     *          is not {@code null} and is not the same as or an ancestor of the\n     *          context class loader, and the caller does not have the\n     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n     *\n     * @since 1.2\n     */\n    @CallerSensitive\n    public ClassLoader getContextClassLoader() {\n        ClassLoader cl \u003d this.contextClassLoader;\n        if (cl \u003d\u003d null)\n            return null;\n        @SuppressWarnings(\"removal\")\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n            ClassLoader.checkClassLoaderPermission(cl, caller);\n        }\n        return cl;\n    }\n\n    /**\n     * Sets the context {@code ClassLoader} for this thread.\n     *\n     * \u003cp\u003e The context {@code ClassLoader} may be set by the creator of the thread\n     * for use by code running in this thread when loading classes and resources.\n     *\n     * \u003cp\u003e If a security manager is present, its {@link\n     * SecurityManager#checkPermission(java.security.Permission) checkPermission}\n     * method is invoked with a {@link RuntimePermission RuntimePermission}{@code\n     * (\"setContextClassLoader\")} permission to see if setting the context\n     * ClassLoader is permitted.\n     *\n     * @param  cl\n     *         the context ClassLoader for this Thread, or null  indicating the\n     *         system class loader (or, failing that, the bootstrap class loader)\n     *\n     * @throws  SecurityException\n     *          if the current thread cannot set the context ClassLoader\n     *\n     * @since 1.2\n     */\n    public void setContextClassLoader(ClassLoader cl) {\n        @SuppressWarnings(\"removal\")\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            sm.checkPermission(new RuntimePermission(\"setContextClassLoader\"));\n        }\n        contextClassLoader \u003d cl;\n    }\n\n    /**\n     * Returns {@code true} if and only if the current thread holds the\n     * monitor lock on the specified object.\n     *\n     * \u003cp\u003eThis method is designed to allow a program to assert that\n     * the current thread already holds a specified lock:\n     * \u003cpre\u003e\n     *     assert Thread.holdsLock(obj);\n     * \u003c/pre\u003e\n     *\n     * @param  obj the object on which to test lock ownership\n     * @return {@code true} if the current thread holds the monitor lock on\n     *         the specified object.\n     * @since 1.4\n     */\n    public static native boolean holdsLock(Object obj);\n\n    private static final StackTraceElement[] EMPTY_STACK_TRACE\n        \u003d new StackTraceElement[0];\n\n    /**\n     * Returns an array of stack trace elements representing the stack dump\n     * of this thread.  This method will return a zero-length array if\n     * this thread has not started, has started but has not yet been\n     * scheduled to run by the system, or has terminated.\n     * If the returned array is of non-zero length then the first element of\n     * the array represents the top of the stack, which is the most recent\n     * method invocation in the sequence.  The last element of the array\n     * represents the bottom of the stack, which is the least recent method\n     * invocation in the sequence.\n     *\n     * \u003cp\u003eIf there is a security manager, and this thread is not\n     * the current thread, then the security manager\u0027s\n     * {@code checkPermission} method is called with a\n     * {@code RuntimePermission(\"getStackTrace\")} permission\n     * to see if it\u0027s ok to get the stack trace.\n     *\n     * \u003cp\u003eSome virtual machines may, under some circumstances, omit one\n     * or more stack frames from the stack trace.  In the extreme case,\n     * a virtual machine that has no stack trace information concerning\n     * this thread is permitted to return a zero-length array from this\n     * method.\n     *\n     * @return an array of {@code StackTraceElement},\n     * each represents one stack frame.\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn\u0027t allow\n     *        getting the stack trace of thread.\n     * @see Throwable#getStackTrace\n     *\n     * @since 1.5\n     */\n    public StackTraceElement[] getStackTrace() {\n        if (this !\u003d Thread.currentThread()) {\n            // check for getStackTrace permission\n            @SuppressWarnings(\"removal\")\n            SecurityManager security \u003d System.getSecurityManager();\n            if (security !\u003d null) {\n                security.checkPermission(SecurityConstants.GET_STACK_TRACE_PERMISSION);\n            }\n            // optimization so we do not call into the vm for threads that\n            // have not yet started or have terminated\n            if (!isAlive()) {\n                return EMPTY_STACK_TRACE;\n            }\n            StackTraceElement[] stackTrace \u003d asyncGetStackTrace();\n            return (stackTrace !\u003d null) ? stackTrace : EMPTY_STACK_TRACE;\n        } else {\n            return (new Exception()).getStackTrace();\n        }\n    }\n\n    /**\n     * Returns an array of stack trace elements representing the stack dump of\n     * this thread. Returns null if the stack trace cannot be obtained. In\n     * the default implementation, null is returned if the thread is a virtual\n     * thread that is not mounted or the thread is a platform thread that has\n     * terminated.\n     */\n    StackTraceElement[] asyncGetStackTrace() {\n        Object stackTrace \u003d getStackTrace0();\n        if (stackTrace \u003d\u003d null) {\n            return null;\n        }\n        StackTraceElement[] stes \u003d (StackTraceElement[]) stackTrace;\n        if (stes.length \u003d\u003d 0) {\n            return null;\n        } else {\n            return StackTraceElement.of(stes);\n        }\n    }\n\n    private native Object getStackTrace0();\n\n    /**\n     * Returns a map of stack traces for all live platform threads. The map\n     * does not include virtual threads.\n     * The map keys are threads and each map value is an array of\n     * {@code StackTraceElement} that represents the stack dump\n     * of the corresponding {@code Thread}.\n     * The returned stack traces are in the format specified for\n     * the {@link #getStackTrace getStackTrace} method.\n     *\n     * \u003cp\u003eThe threads may be executing while this method is called.\n     * The stack trace of each thread only represents a snapshot and\n     * each stack trace may be obtained at different time.  A zero-length\n     * array will be returned in the map value if the virtual machine has\n     * no stack trace information about a thread.\n     *\n     * \u003cp\u003eIf there is a security manager, then the security manager\u0027s\n     * {@code checkPermission} method is called with a\n     * {@code RuntimePermission(\"getStackTrace\")} permission as well as\n     * {@code RuntimePermission(\"modifyThreadGroup\")} permission\n     * to see if it is ok to get the stack trace of all threads.\n     *\n     * @return a {@code Map} from {@code Thread} to an array of\n     * {@code StackTraceElement} that represents the stack trace of\n     * the corresponding thread.\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn\u0027t allow\n     *        getting the stack trace of thread.\n     * @see #getStackTrace\n     * @see Throwable#getStackTrace\n     *\n     * @since 1.5\n     */\n    public static Map\u003cThread, StackTraceElement[]\u003e getAllStackTraces() {\n        // check for getStackTrace permission\n        @SuppressWarnings(\"removal\")\n        SecurityManager security \u003d System.getSecurityManager();\n        if (security !\u003d null) {\n            security.checkPermission(SecurityConstants.GET_STACK_TRACE_PERMISSION);\n            security.checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);\n        }\n\n        // Get a snapshot of the list of all threads\n        Thread[] threads \u003d getThreads();\n        StackTraceElement[][] traces \u003d dumpThreads(threads);\n        Map\u003cThread, StackTraceElement[]\u003e m \u003d HashMap.newHashMap(threads.length);\n        for (int i \u003d 0; i \u003c threads.length; i++) {\n            StackTraceElement[] stackTrace \u003d traces[i];\n            if (stackTrace !\u003d null) {\n                m.put(threads[i], stackTrace);\n            }\n            // else terminated so we don\u0027t put it in the map\n        }\n        return m;\n    }\n\n    /** cache of subclass security audit results */\n    private static class Caches {\n        /** cache of subclass security audit results */\n        static final ClassValue\u003cBoolean\u003e subclassAudits \u003d\n            new ClassValue\u003c\u003e() {\n                @Override\n                protected Boolean computeValue(Class\u003c?\u003e type) {\n                    return auditSubclass(type);\n                }\n            };\n    }\n\n    /**\n     * Verifies that this (possibly subclass) instance can be constructed\n     * without violating security constraints: the subclass must not override\n     * security-sensitive non-final methods, or else the\n     * \"enableContextClassLoaderOverride\" RuntimePermission is checked.\n     */\n    private static boolean isCCLOverridden(Class\u003c?\u003e cl) {\n        if (cl \u003d\u003d Thread.class)\n            return false;\n\n        return Caches.subclassAudits.get(cl);\n    }\n\n    /**\n     * Performs reflective checks on given subclass to verify that it doesn\u0027t\n     * override security-sensitive non-final methods.  Returns true if the\n     * subclass overrides any of the methods, false otherwise.\n     */\n    private static boolean auditSubclass(final Class\u003c?\u003e subcl) {\n        @SuppressWarnings(\"removal\")\n        Boolean result \u003d AccessController.doPrivileged(\n            new PrivilegedAction\u003c\u003e() {\n                public Boolean run() {\n                    for (Class\u003c?\u003e cl \u003d subcl;\n                         cl !\u003d Thread.class;\n                         cl \u003d cl.getSuperclass())\n                    {\n                        try {\n                            cl.getDeclaredMethod(\"getContextClassLoader\", new Class\u003c?\u003e[0]);\n                            return Boolean.TRUE;\n                        } catch (NoSuchMethodException ex) {\n                        }\n                        try {\n                            Class\u003c?\u003e[] params \u003d {ClassLoader.class};\n                            cl.getDeclaredMethod(\"setContextClassLoader\", params);\n                            return Boolean.TRUE;\n                        } catch (NoSuchMethodException ex) {\n                        }\n                    }\n                    return Boolean.FALSE;\n                }\n            }\n        );\n        return result.booleanValue();\n    }\n\n    /**\n     * Return an array of all live threads.\n     */\n    static Thread[] getAllThreads() {\n        return getThreads();\n    }\n\n    private static native StackTraceElement[][] dumpThreads(Thread[] threads);\n    private static native Thread[] getThreads();\n\n    /**\n     * Returns the identifier of this Thread.  The thread ID is a positive\n     * {@code long} number generated when this thread was created.\n     * The thread ID is unique and remains unchanged during its lifetime.\n     *\n     * @return this thread\u0027s ID\n     *\n     * @deprecated This method is not final and may be overridden to return a\n     * value that is not the thread ID. Use {@link #threadId()} instead.\n     *\n     * @since 1.5\n     */\n    @Deprecated(since\u003d\"19\")\n    public long getId() {\n        return threadId();\n    }\n\n    /**\n     * Returns the identifier of this Thread.  The thread ID is a positive\n     * {@code long} number generated when this thread was created.\n     * The thread ID is unique and remains unchanged during its lifetime.\n     *\n     * @return this thread\u0027s ID\n     * @since 19\n     */\n    public final long threadId() {\n        return tid;\n    }\n\n    /**\n     * A thread state.  A thread can be in one of the following states:\n     * \u003cul\u003e\n     * \u003cli\u003e{@link #NEW}\u003cbr\u003e\n     *     A thread that has not yet started is in this state.\n     *     \u003c/li\u003e\n     * \u003cli\u003e{@link #RUNNABLE}\u003cbr\u003e\n     *     A thread executing in the Java virtual machine is in this state.\n     *     \u003c/li\u003e\n     * \u003cli\u003e{@link #BLOCKED}\u003cbr\u003e\n     *     A thread that is blocked waiting for a monitor lock\n     *     is in this state.\n     *     \u003c/li\u003e\n     * \u003cli\u003e{@link #WAITING}\u003cbr\u003e\n     *     A thread that is waiting indefinitely for another thread to\n     *     perform a particular action is in this state.\n     *     \u003c/li\u003e\n     * \u003cli\u003e{@link #TIMED_WAITING}\u003cbr\u003e\n     *     A thread that is waiting for another thread to perform an action\n     *     for up to a specified waiting time is in this state.\n     *     \u003c/li\u003e\n     * \u003cli\u003e{@link #TERMINATED}\u003cbr\u003e\n     *     A thread that has exited is in this state.\n     *     \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e\n     * A thread can be in only one state at a given point in time.\n     * These states are virtual machine states which do not reflect\n     * any operating system thread states.\n     *\n     * @since   1.5\n     * @see #getState\n     */\n    public enum State {\n        /**\n         * Thread state for a thread which has not yet started.\n         */\n        NEW,\n\n        /**\n         * Thread state for a runnable thread.  A thread in the runnable\n         * state is executing in the Java virtual machine but it may\n         * be waiting for other resources from the operating system\n         * such as processor.\n         */\n        RUNNABLE,\n\n        /**\n         * Thread state for a thread blocked waiting for a monitor lock.\n         * A thread in the blocked state is waiting for a monitor lock\n         * to enter a synchronized block/method or\n         * reenter a synchronized block/method after calling\n         * {@link Object#wait() Object.wait}.\n         */\n        BLOCKED,\n\n        /**\n         * Thread state for a waiting thread.\n         * A thread is in the waiting state due to calling one of the\n         * following methods:\n         * \u003cul\u003e\n         *   \u003cli\u003e{@link Object#wait() Object.wait} with no timeout\u003c/li\u003e\n         *   \u003cli\u003e{@link #join() Thread.join} with no timeout\u003c/li\u003e\n         *   \u003cli\u003e{@link LockSupport#park() LockSupport.park}\u003c/li\u003e\n         * \u003c/ul\u003e\n         *\n         * \u003cp\u003eA thread in the waiting state is waiting for another thread to\n         * perform a particular action.\n         *\n         * For example, a thread that has called {@code Object.wait()}\n         * on an object is waiting for another thread to call\n         * {@code Object.notify()} or {@code Object.notifyAll()} on\n         * that object. A thread that has called {@code Thread.join()}\n         * is waiting for a specified thread to terminate.\n         */\n        WAITING,\n\n        /**\n         * Thread state for a waiting thread with a specified waiting time.\n         * A thread is in the timed waiting state due to calling one of\n         * the following methods with a specified positive waiting time:\n         * \u003cul\u003e\n         *   \u003cli\u003e{@link #sleep Thread.sleep}\u003c/li\u003e\n         *   \u003cli\u003e{@link Object#wait(long) Object.wait} with timeout\u003c/li\u003e\n         *   \u003cli\u003e{@link #join(long) Thread.join} with timeout\u003c/li\u003e\n         *   \u003cli\u003e{@link LockSupport#parkNanos LockSupport.parkNanos}\u003c/li\u003e\n         *   \u003cli\u003e{@link LockSupport#parkUntil LockSupport.parkUntil}\u003c/li\u003e\n         * \u003c/ul\u003e\n         */\n        TIMED_WAITING,\n\n        /**\n         * Thread state for a terminated thread.\n         * The thread has completed execution.\n         */\n        TERMINATED;\n    }\n\n    /**\n     * Returns the state of this thread.\n     * This method is designed for use in monitoring of the system state,\n     * not for synchronization control.\n     *\n     * @return this thread\u0027s state.\n     * @since 1.5\n     */\n    public State getState() {\n        return threadState();\n    }\n\n    /**\n     * Returns the state of this thread.\n     * This method can be used instead of getState as getState is not final and\n     * so can be overridden to run arbitrary code.\n     */\n    State threadState() {\n        return jdk.internal.misc.VM.toThreadState(holder.threadStatus);\n    }\n\n    /**\n     * Returns true if the thread has terminated.\n     */\n    boolean isTerminated() {\n        return threadState() \u003d\u003d State.TERMINATED;\n    }\n\n    /**\n     * Interface for handlers invoked when a {@code Thread} abruptly\n     * terminates due to an uncaught exception.\n     * \u003cp\u003eWhen a thread is about to terminate due to an uncaught exception\n     * the Java Virtual Machine will query the thread for its\n     * {@code UncaughtExceptionHandler} using\n     * {@link #getUncaughtExceptionHandler} and will invoke the handler\u0027s\n     * {@code uncaughtException} method, passing the thread and the\n     * exception as arguments.\n     * If a thread has not had its {@code UncaughtExceptionHandler}\n     * explicitly set, then its {@code ThreadGroup} object acts as its\n     * {@code UncaughtExceptionHandler}. If the {@code ThreadGroup} object\n     * has no\n     * special requirements for dealing with the exception, it can forward\n     * the invocation to the {@linkplain #getDefaultUncaughtExceptionHandler\n     * default uncaught exception handler}.\n     *\n     * @see #setDefaultUncaughtExceptionHandler\n     * @see #setUncaughtExceptionHandler\n     * @see ThreadGroup#uncaughtException\n     * @since 1.5\n     */\n    @FunctionalInterface\n    public interface UncaughtExceptionHandler {\n        /**\n         * Method invoked when the given thread terminates due to the\n         * given uncaught exception.\n         * \u003cp\u003eAny exception thrown by this method will be ignored by the\n         * Java Virtual Machine.\n         * @param t the thread\n         * @param e the exception\n         */\n        void uncaughtException(Thread t, Throwable e);\n    }\n\n    // null unless explicitly set\n    private volatile UncaughtExceptionHandler uncaughtExceptionHandler;\n\n    // null unless explicitly set\n    private static volatile UncaughtExceptionHandler defaultUncaughtExceptionHandler;\n\n    /**\n     * Set the default handler invoked when a thread abruptly terminates\n     * due to an uncaught exception, and no other handler has been defined\n     * for that thread.\n     *\n     * \u003cp\u003eUncaught exception handling is controlled first by the thread, then\n     * by the thread\u0027s {@link ThreadGroup} object and finally by the default\n     * uncaught exception handler. If the thread does not have an explicit\n     * uncaught exception handler set, and the thread\u0027s thread group\n     * (including parent thread groups)  does not specialize its\n     * {@code uncaughtException} method, then the default handler\u0027s\n     * {@code uncaughtException} method will be invoked.\n     * \u003cp\u003eBy setting the default uncaught exception handler, an application\n     * can change the way in which uncaught exceptions are handled (such as\n     * logging to a specific device, or file) for those threads that would\n     * already accept whatever \u0026quot;default\u0026quot; behavior the system\n     * provided.\n     *\n     * \u003cp\u003eNote that the default uncaught exception handler should not usually\n     * defer to the thread\u0027s {@code ThreadGroup} object, as that could cause\n     * infinite recursion.\n     *\n     * @param ueh the object to use as the default uncaught exception handler.\n     * If {@code null} then there is no default handler.\n     *\n     * @throws SecurityException if a security manager is present and it denies\n     *         {@link RuntimePermission}{@code (\"setDefaultUncaughtExceptionHandler\")}\n     *\n     * @see #setUncaughtExceptionHandler\n     * @see #getUncaughtExceptionHandler\n     * @see ThreadGroup#uncaughtException\n     * @since 1.5\n     */\n    public static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler ueh) {\n        @SuppressWarnings(\"removal\")\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            sm.checkPermission(\n                new RuntimePermission(\"setDefaultUncaughtExceptionHandler\"));\n        }\n        defaultUncaughtExceptionHandler \u003d ueh;\n    }\n\n    /**\n     * Returns the default handler invoked when a thread abruptly terminates\n     * due to an uncaught exception. If the returned value is {@code null},\n     * there is no default.\n     * @since 1.5\n     * @see #setDefaultUncaughtExceptionHandler\n     * @return the default uncaught exception handler for all threads\n     */\n    public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler(){\n        return defaultUncaughtExceptionHandler;\n    }\n\n    /**\n     * Returns the handler invoked when this thread abruptly terminates\n     * due to an uncaught exception. If this thread has not had an\n     * uncaught exception handler explicitly set then this thread\u0027s\n     * {@code ThreadGroup} object is returned, unless this thread\n     * has terminated, in which case {@code null} is returned.\n     * @since 1.5\n     * @return the uncaught exception handler for this thread\n     */\n    public UncaughtExceptionHandler getUncaughtExceptionHandler() {\n        if (isTerminated()) {\n            // uncaughtExceptionHandler may be set to null after thread terminates\n            return null;\n        } else {\n            UncaughtExceptionHandler ueh \u003d uncaughtExceptionHandler;\n            return (ueh !\u003d null) ? ueh : getThreadGroup();\n        }\n    }\n\n    /**\n     * Set the handler invoked when this thread abruptly terminates\n     * due to an uncaught exception.\n     * \u003cp\u003eA thread can take full control of how it responds to uncaught\n     * exceptions by having its uncaught exception handler explicitly set.\n     * If no such handler is set then the thread\u0027s {@code ThreadGroup}\n     * object acts as its handler.\n     * @param ueh the object to use as this thread\u0027s uncaught exception\n     * handler. If {@code null} then this thread has no explicit handler.\n     * @throws  SecurityException  if the current thread is not allowed to\n     *          modify this thread.\n     * @see #setDefaultUncaughtExceptionHandler\n     * @see ThreadGroup#uncaughtException\n     * @since 1.5\n     */\n    public void setUncaughtExceptionHandler(UncaughtExceptionHandler ueh) {\n        checkAccess();\n        uncaughtExceptionHandler(ueh);\n    }\n\n    void uncaughtExceptionHandler(UncaughtExceptionHandler ueh) {\n        uncaughtExceptionHandler \u003d ueh;\n    }\n\n    /**\n     * Dispatch an uncaught exception to the handler. This method is\n     * called when a thread terminates with an exception.\n     */\n    void dispatchUncaughtException(Throwable e) {\n        getUncaughtExceptionHandler().uncaughtException(this, e);\n    }\n\n    /**\n     * Holder class for constants.\n     */\n    @SuppressWarnings(\"removal\")\n    private static class Constants {\n        // Thread group for virtual threads.\n        static final ThreadGroup VTHREAD_GROUP;\n\n        // AccessControlContext that doesn\u0027t support any permissions.\n        @SuppressWarnings(\"removal\")\n        static final AccessControlContext NO_PERMISSIONS_ACC;\n\n        static {\n            var getThreadGroup  \u003d new PrivilegedAction\u003cThreadGroup\u003e() {\n                @Override\n                public ThreadGroup run() {\n                    ThreadGroup parent \u003d Thread.currentCarrierThread().getThreadGroup();\n                    for (ThreadGroup p; (p \u003d parent.getParent()) !\u003d null; )\n                        parent \u003d p;\n                    return parent;\n                }\n            };\n            @SuppressWarnings(\"removal\")\n            ThreadGroup root \u003d AccessController.doPrivileged(getThreadGroup);\n            VTHREAD_GROUP \u003d new ThreadGroup(root, \"VirtualThreads\", MAX_PRIORITY, false);\n\n            NO_PERMISSIONS_ACC \u003d new AccessControlContext(new ProtectionDomain[] {\n                new ProtectionDomain(null, null)\n            });\n        }\n    }\n\n    /**\n     * Returns the special ThreadGroup for virtual threads.\n     */\n    static ThreadGroup virtualThreadGroup() {\n        return Constants.VTHREAD_GROUP;\n    }\n\n    // The following three initially uninitialized fields are exclusively\n    // managed by class java.util.concurrent.ThreadLocalRandom. These\n    // fields are used to build the high-performance PRNGs in the\n    // concurrent code.\n\n    /** The current seed for a ThreadLocalRandom */\n    long threadLocalRandomSeed;\n\n    /** Probe hash value; nonzero if threadLocalRandomSeed initialized */\n    int threadLocalRandomProbe;\n\n    /** Secondary seed isolated from public ThreadLocalRandom sequence */\n    int threadLocalRandomSecondarySeed;\n\n    /** The thread container that this thread is in */\n    private @Stable ThreadContainer container;\n    ThreadContainer threadContainer() {\n        return container;\n    }\n    void setThreadContainer(ThreadContainer container) {\n        // assert this.container \u003d\u003d null;\n        this.container \u003d container;\n    }\n\n    /** The top of this stack of stackable scopes owned by this thread */\n    private volatile StackableScope headStackableScopes;\n    StackableScope headStackableScopes() {\n        return headStackableScopes;\n    }\n    static void setHeadStackableScope(StackableScope scope) {\n        currentThread().headStackableScopes \u003d scope;\n    }\n\n    /* Some private helper methods */\n    private native void setPriority0(int newPriority);\n    private native void interrupt0();\n    private static native void clearInterruptEvent();\n    private native void setNativeName(String name);\n\n    // The address of the next thread identifier, see ThreadIdentifiers.\n    private static native long getNextThreadIdOffset();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-21/lib/src.zip!/java.base/java/lang/Thread.java
	at java.base/java.net.URI.create(URI.java:932)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	... 13 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-21/lib/src.zip!/java.base/java/lang/Thread.java
	at java.base/java.net.URI$Parser.fail(URI.java:2995)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3166)
	at java.base/java.net.URI$Parser.parse(URI.java:3202)
	at java.base/java.net.URI.<init>(URI.java:645)
	at java.base/java.net.URI.create(URI.java:930)
	... 22 more

févr. 08, 2024 3:14:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-21/lib/src.zip%21/java.base/java/lang/Thread.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-21/lib/src.zip!/java.base/java/lang/Thread.java
	at java.base/java.net.URI.create(URI.java:932)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	... 13 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-21/lib/src.zip!/java.base/java/lang/Thread.java
	at java.base/java.net.URI$Parser.fail(URI.java:2995)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3166)
	at java.base/java.net.URI$Parser.parse(URI.java:3202)
	at java.base/java.net.URI.<init>(URI.java:645)
	at java.base/java.net.URI.create(URI.java:930)
	... 22 more

févr. 08, 2024 3:14:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3217
févr. 08, 2024 3:14:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3218
févr. 08, 2024 3:14:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3224
2024.02.08 15:14:17 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:14:19 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3234
2024.02.08 15:14:20 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:14:40 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:14:42 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:15:52 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:15:58 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:16:01 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:16:06 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3357
2024.02.08 15:16:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:16:35 ERROR Failed to tokenize input for semantic tokens for C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
scala.meta.tokenizers.TokenizeException: <input>:48: error: unclosed character literal
        val (note', cache1) = cache(e)    
                 ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)

2024.02.08 15:16:36 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:16:41 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:16:58 ERROR Failed to tokenize input for semantic tokens for C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
scala.meta.tokenizers.TokenizeException: <input>:48: error: unclosed character literal
        val (note', cache1) = cache(e)    
                 ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)

2024.02.08 15:16:59 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:17:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:17:29 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:17:35 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:17:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3476
2024.02.08 15:20:21 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:20:23 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:20:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:20:27 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:20:50 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:20:53 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:20:57 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:21:05 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:21:09 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:21:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3584
2024.02.08 15:21:11 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:21:21 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:21:43 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:21:46 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:21:47 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:22:01 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:22:05 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:22:11 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:22:13 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:22:37 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:22:43 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:22:55 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:22:56 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:23:01 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:27:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3825
2024.02.08 15:27:30 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:27:32 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:27:46 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:27:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3865
févr. 08, 2024 3:27:50 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-27-50-170.md
2024.02.08 15:27:50 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:27:51 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-27-51-306.md
févr. 08, 2024 3:27:53 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-27-53-401.md
févr. 08, 2024 3:27:54 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-27-54-297.md
2024.02.08 15:27:54 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:27:54 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-27-54-922.md
févr. 08, 2024 3:28:02 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-02-666.md
2024.02.08 15:28:03 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:03 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-03-339.md
févr. 08, 2024 3:28:04 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-04-241.md
2024.02.08 15:28:04 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:04 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-04-794.md
févr. 08, 2024 3:28:06 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-06-715.md
2024.02.08 15:28:07 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:07 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-07-806.md
févr. 08, 2024 3:28:09 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-08-994.md
2024.02.08 15:28:09 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:09 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-09-698.md
févr. 08, 2024 3:28:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3926
févr. 08, 2024 3:28:13 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-13-558.md
févr. 08, 2024 3:28:14 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-14-917.md
2024.02.08 15:28:15 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:15 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-15-591.md
févr. 08, 2024 3:28:17 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-17-024.md
2024.02.08 15:28:17 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:17 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-17-701.md
févr. 08, 2024 3:28:18 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-18-877.md
févr. 08, 2024 3:28:19 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-19-792.md
févr. 08, 2024 3:28:20 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-20-527.md
2024.02.08 15:28:21 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:21 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-21-550.md
févr. 08, 2024 3:28:21 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-21-854.md
2024.02.08 15:28:22 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:22 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-22-478.md
févr. 08, 2024 3:28:28 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-28-274.md
févr. 08, 2024 3:28:29 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-29-029.md
2024.02.08 15:28:29 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:29 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-29-950.md
févr. 08, 2024 3:28:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4004
févr. 08, 2024 3:28:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-32-605.md
févr. 08, 2024 3:28:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-33-114.md
2024.02.08 15:28:33 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-33-815.md
févr. 08, 2024 3:28:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-34-382.md
févr. 08, 2024 3:28:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-34-972.md
2024.02.08 15:28:35 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:28:35 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-28-35-601.md
févr. 08, 2024 3:29:08 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-29-08-920.md
févr. 08, 2024 3:29:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4043
févr. 08, 2024 3:29:25 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-29-25-036.md
févr. 08, 2024 3:29:25 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-29-25-425.md
2024.02.08 15:29:26 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:29:26 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-29-26-294.md
févr. 08, 2024 3:29:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-29-46-537.md
2024.02.08 15:29:47 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:29:47 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\L3-upec\Culture_des_langages\Scala\.metals\.reports\metals-full\2024-02-08\r_compiler-error_15-29-47-467.md
févr. 08, 2024 3:29:48 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4084
2024.02.08 15:29:49 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:29:50 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
févr. 08, 2024 3:30:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4104
2024.02.08 15:30:10 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:33:02 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:33:46 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:38:25 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:39:48 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:43:07 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:43:12 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:43:14 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
2024.02.08 15:43:18 WARN  no build target for: C:\L3-upec\Culture_des_langages\Scala\TP4\tp4.scala
